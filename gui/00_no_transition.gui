types STOP {

  type widget_pivotal_moment_event_window = widget_activity_locale_fullscreen_event {
    datacontext = "[ActivityLocaleWindow.GetEventWindowInsert( PdxGuiWidget.AccessSelf )]"
    datacontext = "[EventWindowViewInsert.GetOpenEvent]"
    visible = "[EventWindowViewInsert.HasOpenEvent]"

    state = {
      name = activity_new_event_shown
      on_start = "[PdxGuiWidget.FindChild( 'event_video' ).GfxVideoControl.Restart]"
      on_start = "[PdxGuiTriggerAllAnimations( 'activity_event_appear' )]"
    }

    blockoverride "fullscreen_event_attributes"
    {
      visible = "[Or( Not( EventWindowData.GetEventBackgroundData.HasVideo ), PdxGuiWidget.AccessParent.FindChild( 'event_video' ).GfxVideoControl.IsPlaybackComplete )]"

      state = {
        name = _show
        using = Animation_Curve_Default
        duration = 0
        alpha = 1
      }
    }
    blockoverride "event_transition_picture_properties"
    {
      parentanchor = center
      using = PivotalMomentTransitionAnimation
      alwaystransparent = yes
      alpha = 0
      scale = 1.01

      state = {
        name = activity_event_appear
        alpha = 1
        next = transition_still
        scale = 1.01
      }
    }
    blockoverride "event_transition_video_properties"
    {
      parentanchor = center
      loop = no
      restart_on_show = yes
    }
  }

  type event_window_transition_widget = margin_widget {
		size = { 100% 100% }
		datacontext = "[EventWindowData.GetEventTransitionData]"
		visible = "[EventWindowData.IsShowingTransition]"

    state = {
      name = activity_event_appear
      trigger_on_create = yes
      duration = 1
      on_start = "[PdxGuiWidget.FindChild('cover').Show]"
      on_finish = "[PdxGuiWidget.FindChild('cover').Hide]"
    }

		icon = {
			name = "event_transition_picture_with_mask"
			visible = "[And( Not( EventWindowTransitionData.HasVideo ), EventWindowTransitionData.HasVideoMask )]"
			texture = "[EventWindowTransitionData.GetTexture]"
			size = { 100% 100% }

			modify_texture = {
				video = "[EventWindowTransitionData.GetVideoMask]"
				blend_mode = alphamultiply
				restart_on_show = yes

				block "event_transition_mask_properties"
				{
					loop = no
				}
			}

			block "event_transition_picture_properties"
			{
			}
		}

		icon = {
			name = "event_transition_picture"
			visible = "[Not( Or( EventWindowTransitionData.HasVideo, EventWindowTransitionData.HasVideoMask) )]"
			texture = "[EventWindowTransitionData.GetTexture]"
			size = { 100% 100% }

      using = PivotalMomentTransitionAnimation

			state = {
				name = activity_event_appear
        alpha = 1
				next = transition_still
			}

			block "event_transition_picture_properties"
			{
			}
		}

		video_icon = {
			name = "event_transition_video"
			visible = "[EventWindowTransitionData.HasVideo]"
			video = "[EventWindowTransitionData.GetVideo]"
			size = { 100% 100% }
			loop = no
			restart_on_show = yes

			block "event_transition_video_properties"
			{
			}
		}

    widget = {
      size = { 100% 100% }
      alwaystransparent = no
      name = "cover"
    }
	}

  type widget_pivotal_moment_event_window_small = activity_event_widget {
		datacontext = "[ActivityWindow.GetEventWindowInsert( PdxGuiWidget.AccessSelf )]"
		datacontext = "[EventWindowViewInsert.GetOpenEvent]"
		visible = "[EventWindowViewInsert.HasOpenEvent]"

		state = {
			name = activity_new_event_shown
			on_start = "[PdxGuiWidget.FindChild( 'event_video' ).GfxVideoControl.Restart]"
			on_start = "[PdxGuiTriggerAllAnimations( 'activity_event_appear' )]"
		}

		blockoverride "event_transition_picture_properties"
		{
			parentanchor = center
			using = PivotalMomentTransitionAnimation

			state = {
				name = activity_event_appear
				alpha = 1
				scale = 1.25
				next = transition_still
			}
		}

		blockoverride "event_transition_video_properties"
		{
			parentanchor = center
			loop = no
			restart_on_show = yes
		}
	}
}


template PivotalMomentTransitionAnimation
{
	state = {
		name = transition_still
		trigger_on_create = yes
		next = transition_zoom
    alpha = 1
    # scale = 1.01
		bezier = { 0.25 0.1 0.25 1 }
	}
	state = {
		name = transition_zoom
		duration = 0.6
		scale = 1
    alpha = 1
		bezier = { 0.25 0.1 0.25 1 }
    next = hide
	}
  state = {
    name = hide
    alpha = 0
    delay = 0.3
    duration = 0.4
  }
}
