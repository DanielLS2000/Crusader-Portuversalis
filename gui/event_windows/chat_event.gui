window = {
	name = "chat_event"
	gfxtype = windowgfx
	parentanchor = hcenter|bottom
	layer = tutorial
	allow_outside = yes
	size = { 375 33 }           ############ SIZES NEED TO MATCH
	position = { -20 0 }

	datacontext = "[EventWindow.AccessEventWindowData]"

	state = {
		name = _show
		trigger_on_create = yes

		on_start = "[GetVariableSystem.Clear( 'event_window_mouse_leave')]"

		on_finish = "[GetVariableSystem.Set('chat', 'yes')]"

		# start_sound = {
		# 	soundeffect = "event:/SFX/Events/Panels/sfx_event_panel_letter"
		# }
	}

	state = {
		name = _hide
		duration = 0.1
		on_start = "[PdxGuiWidget.AccessChild('letter_paper').TriggerAnimation('hide')]"
		on_start = "[PdxGuiWidget.AccessChild('letter_content').TriggerAnimation('hide')]"
		on_finish = "[GetVariableSystem.Clear('chat')]"
		on_finish = "[GetVariableSystem.Clear('hide_chat_helper')]"
	}

	state = {
		name = _mouse_hierarchy_leave
		on_start = "[GetVariableSystem.Set( 'event_window_mouse_leave', 'true' )]"
	}

	### CONTENT ###
	widget = {
		name = "letter_content"
		size = { 100% 100% }
		alpha = 1
		allow_outside = yes

		background = { using = Background_Area_Border_Solid }

		hbox = {
			layoutpolicy_vertical = expanding

			# widget = {
			# 	size = { 30 0 }
			# }

			widget = { #chat window
				size = { 0 30 }
				layoutpolicy_horizontal = expanding
				# background = { using = Background_Area_Border_Solid }

				name = "chat_message_container"
			}

			### Options
			hbox = {
				name = "option_grid"
				datamodel = "[EventWindowData.GetOptions]"

				item = {
					hbox = {
						name = "event_option_button"

						button = {
							visible = "[EqualTo_int32(PdxGuiWidget.GetIndexInDataModel, '(int32)0')]"
							shortcut = confirm
							onclick = "[EventOption.Select]"
							enabled = "[EventOption.IsValid]"

							state = {
								name = exit_event
								on_finish = "[EventOption.Select]"
							}
							tooltip = "[EventOption.GetTooltip]"
							# tooltip_visible = "[Not(EventOption.IsValid)]"
						}

						button_close = {
							visible = "[EqualTo_int32(PdxGuiWidget.GetIndexInDataModel, '(int32)1')]"
							# visible_at_creation = no
							# visible = "[Not(EventOption.IsValid)]"
							size = { 30 30 }
							tooltip = "[EventOption.GetTooltip]"
							shortcut = close_window
							onclick = "[EventOption.Select]"
						}

					}
				}
			}

			expand = { }
		}
	}
}
