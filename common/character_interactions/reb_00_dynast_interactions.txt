#Interactions relating to the head of the dynasty

disinherit_interaction = {
	icon = icon_dynasty
	category = interaction_category_hostile
	interface_priority = 60

	desc = disinherit_interaction_desc
	use_diplomatic_range = no
	
	is_shown = {
		NOT = { 
			scope:recipient = scope:actor 

			AND = { # Explicit AND to ensure no funny business
				scope:recipient = { is_child_of = scope:actor }
				scope:actor.dynasty = {
					this = scope:recipient.dynasty
					has_dynasty_perk = fp2_coterie_legacy_5
				}
			}
		}

		scope:actor = {
			is_dynast = yes
			dynasty = scope:recipient.dynasty

		}
		scope:recipient = {
			NOT = {
				has_trait = disinherited
			}
		}
	}

	is_valid = {
		custom_description = {
			scope:actor.culture = {
				NOT = { has_cultural_parameter = cannot_disherit }
			}
			text = "mystical_ancestors_disinherit"
		}
	}

	is_valid_showing_failures_only = {
		trigger_if = {
			limit = {
				NOT = { # in such cases, it will be free so no need to check for Renown
					scope:recipient = {
						OR = {
							has_trait = disputed_heritage
							any_secret = {
								secret_type = secret_disputed_heritage
								is_known_by = scope:actor
							}
							has_trait = bastard
						}
					}
				}
			}
			scope:actor.dynasty = {
				dynasty_prestige >= medium_dynasty_prestige_value
			}
		}

		scope:recipient = { is_busy_in_events_localised = yes }
		scope:recipient = { NOT = { has_strong_hook = scope:actor } }
		trigger_if = {
			limit = {
				scope:recipient = {
					NOR = {
						is_child_of = scope:actor
						is_grandchild_of = scope:actor
						is_great_grandchild_of = scope:actor
					}
				}
			}
			custom_description = {
				scope:recipient.top_liege = scope:actor.top_liege
				text = "same_realm_as"
			}
		}
		custom_tooltip = {
			text = cannot_take_overt_hostile_actions_against_diarch.tt
			NOT = { scope:recipient ?= scope:actor.diarch }
		}
	}

	on_auto_accept = {
		scope:recipient = {
			trigger_event = char_interaction.0020
		}
	}
	
	on_accept = {
		scope:actor = {
			stress_impact = {
				forgiving = minor_stress_impact_gain
				compassionate = minor_stress_impact_gain
			}

			add_character_modifier = {
				modifier = parent_disinherited_child_modifier
				years = 5
			}

			hidden_effect = {
				send_interface_toast = {
					title = disinherit_interaction_notification

					left_icon = scope:actor					
					right_icon = scope:recipient

					scope:recipient = {
						show_as_tooltip = {
							disinherit_effect = { DISINHERITOR = scope:actor }
						}
					}
				}
			}
		}

		scope:recipient = {
			disinherit_effect = { DISINHERITOR = scope:actor }
		}

		# If we're a clan this interaction affects unity
            add_clan_unity_interaction_effect = {
                CHARACTER = scope:actor
                TARGET = scope:recipient
                VALUE = medium_unity_loss
                DESC = clan_unity_disinheritance.desc
                REVERSE_NON_HOUSE_TARGET = no
            }

		if = {
			limit = {
				scope:recipient = {
					any_secret = {
						secret_type = secret_disputed_heritage
						is_known_by = scope:actor
						save_temporary_scope_as = secret_to_reveal
					}
				}
			}

			scope:secret_to_reveal = {
				expose_secret = scope:recipient.mother
			}

			scope:recipient = {
				add_trait = disputed_heritage
			}
		}
	}
	
	cost = {
		renown = {
			value = {
				add = medium_dynasty_prestige_value
				add = 15
				if = {
					limit = {
						scope:recipient = {
							is_landed = yes
						}
					}
					add = major_dynasty_prestige_value
					add = 10
				}
				if = {
					limit = {
						scope:recipient = {
							is_landed = no
							any_heir_title = {
								exists = holder
							}
						}
					}
					add = medium_dynasty_prestige_value
					add = 10
				}
				if = {
					limit = {
						scope:recipient = {
							OR = {
								has_trait = disputed_heritage
								any_secret = {
									secret_type = secret_disputed_heritage
									is_known_by = scope:actor
								}
								has_trait = bastard
							}
						}
					}
					multiply = 0
				}
				if = {
					limit = { scope:actor.dynasty.dynasty_prestige_level = 2 }
					multiply = 1.15
				}
				if = {
					limit = { scope:actor.dynasty.dynasty_prestige_level = 3 }
					multiply = 1.3
				}
				if = {
					limit = { scope:actor.dynasty.dynasty_prestige_level = 4 }
					multiply = 1.45
				}
				if = {
					limit = { scope:actor.dynasty.dynasty_prestige_level = 5 }
					multiply = 1.5
				}
				if = {
					limit = { scope:actor.dynasty.dynasty_prestige_level = 6 }
					multiply = 1.8
				}
				if = {
					limit = { scope:actor.dynasty.dynasty_prestige_level = 7 }
					multiply = 2.1
				}
				if = {
					limit = { scope:actor.dynasty.dynasty_prestige_level = 8 }
					multiply = 2.4
				}
				if = {
					limit = { scope:actor.dynasty.dynasty_prestige_level = 9 }
					multiply = 2.8
				}
				if = {
					limit = { scope:actor.dynasty.dynasty_prestige_level = 10 }
					multiply = 3.2
				}
				if = {
					limit = { #decrease+++ value if the target has a major flaw
						scope:recipient = {
							OR = {
								has_trait = infertile
								has_trait = inbred
								has_trait = incapable
							}
							NOR = {
								has_trait = infirm
								has_trait = impotent
								has_trait = sickly
							}
						}
					}
					multiply = 0.4
				}
				if = {
					limit = { #decrease value if the target has a minor flaw
						scope:recipient = {
							OR = {
								has_trait = infirm
								has_trait = impotent
								has_trait = sickly
							}
							NOR = {
								has_trait = infertile
								has_trait = inbred
								has_trait = incapable
							}
						}
					}
					multiply = 0.6
				}
				if = {
					limit = { #combine
						scope:recipient = {
							OR = {
								has_trait = infirm
								has_trait = impotent
								has_trait = sickly
							}
							OR = {
								has_trait = infertile
								has_trait = inbred
								has_trait = incapable
							}
						}
					}
					multiply = 0.3
				}
			}
		}
		prestige = {
			value = {
				add = medium_prestige_value
				if = {
					limit = {
						scope:recipient = {
							is_landed = yes
						}
					}
					add = massive_prestige_value
				}
				if = {
					limit = {
						scope:recipient = {
							is_landed = no
							any_heir_title = {
								exists = holder
							}
						}
					}
					add = medium_prestige_value
				}
				if = {
					limit = {
						scope:recipient = {
							OR = {
								has_trait = disputed_heritage
								any_secret = {
									secret_type = secret_disputed_heritage
									is_known_by = scope:actor
								}
								has_trait = bastard
							}
						}
					}
					multiply = 0
				}
				if = {
					limit = { scope:actor.dynasty.dynasty_prestige_level = 2 }
					multiply = 1.05
				}
				if = {
					limit = { scope:actor.dynasty.dynasty_prestige_level = 3 }
					multiply = 1.1
				}
				if = {
					limit = { scope:actor.dynasty.dynasty_prestige_level = 4 }
					multiply = 1.15
				}
				if = {
					limit = { scope:actor.dynasty.dynasty_prestige_level = 5 }
					multiply = 1.2
				}
				if = {
					limit = { scope:actor.dynasty.dynasty_prestige_level = 6 }
					multiply = 1.3
				}
				if = {
					limit = { scope:actor.dynasty.dynasty_prestige_level = 7 }
					multiply = 1.4
				}
				if = {
					limit = { scope:actor.dynasty.dynasty_prestige_level = 8 }
					multiply = 1.5
				}
				if = {
					limit = { scope:actor.dynasty.dynasty_prestige_level = 9 }
					multiply = 1.6
				}
				if = {
					limit = { scope:actor.dynasty.dynasty_prestige_level = 10 }
					multiply = 1.8
				}
				if = {
					limit = { #decrease+++ value if the target has a major flaw
						scope:recipient = {
							OR = {
								has_trait = infertile
								has_trait = inbred
								has_trait = incapable
							}
							NOR = {
								has_trait = infirm
								has_trait = impotent
								has_trait = sickly
							}
						}
					}
					multiply = 0.4
				}
				if = {
					limit = { #decrease value if the target has a minor flaw
						scope:recipient = {
							OR = {
								has_trait = infirm
								has_trait = impotent
								has_trait = sickly
							}
							NOR = {
								has_trait = infertile
								has_trait = inbred
								has_trait = incapable
							}
						}
					}
					multiply = 0.6
				}
				if = {
					limit = { #combine
						scope:recipient = {
							OR = {
								has_trait = infirm
								has_trait = impotent
								has_trait = sickly
							}
							OR = {
								has_trait = infertile
								has_trait = inbred
								has_trait = incapable
							}
						}
					}
					multiply = 0.3
				}
			}
		}
	}
	
	auto_accept = yes

	ai_potential = {
		is_at_war = no
		NOT = {
			has_trait = forgiving
		}
	}
	
	ai_targets = {
		ai_recipients = dynasty
		max = 20
	}
	
	ai_frequency = 96
	
	ai_will_do = {
		base = 0
		
		modifier = {
			add = 100
			scope:recipient = {
				OR = {
					has_relation_rival = scope:actor
					has_relation_nemesis = scope:actor
				}
			}
		}
		
		modifier = {
			add = 100
			scope:recipient = {
				is_primary_heir_of = scope:actor
				OR = {
					has_trait = inbred
					has_trait = intellect_bad_3
					has_trait = incapable
				}
			}
		}
		
		modifier = {
			add = 5
			ai_vengefulness >= medium_positive_ai_value
			scope:recipient = {
				is_heir_of = scope:actor
			}
			OR = {
				AND = {
					scope:recipient = {
						has_trait = incestuous
					}
					NOT = { is_incestuous_trigger = yes }
					trait_is_criminal_in_faith_trigger = { TRAIT = incestuous FAITH = scope:actor.faith GENDER_CHARACTER = scope:recipient }
				}
				AND = {
					scope:recipient = {
						has_trait = kinslayer
					}
					NOT = { has_trait = kinslayer }
				}
				AND = {
					scope:recipient = {
						has_trait = adulterer
					}
					NOR = {
						has_trait = adulterer
						has_trait = fornicator
					}
					trait_is_criminal_in_faith_trigger = { TRAIT = adulterer FAITH = scope:actor.faith GENDER_CHARACTER = scope:recipient }
				}
				AND = {
					scope:recipient = {
						has_trait = fornicator
					}
					NOR = {
						has_trait = adulterer
						has_trait = fornicator
					}
					trait_is_criminal_in_faith_trigger = { TRAIT = fornicator FAITH = scope:actor.faith GENDER_CHARACTER = scope:recipient }
				}
				AND = {
					scope:recipient = {
						has_trait = deviant
					}
					NOT = {
						is_deviant_trigger = yes
					}
					trait_is_criminal_in_faith_trigger = { TRAIT = deviant FAITH = scope:actor.faith GENDER_CHARACTER = scope:recipient }
				}
				AND = {
					scope:recipient = {
						has_trait = witch
					}
					NOT = {
						is_witch_trigger = yes
					}
					trait_is_criminal_in_faith_trigger = { TRAIT = witch FAITH = scope:actor.faith GENDER_CHARACTER = scope:recipient }
				}
				AND = {
					scope:recipient = {
						has_trait = sodomite
					}
					NOR = {
						has_trait = sodomite
						any_secret = {
							secret_type = secret_homosexual
						}
					}
					trait_is_criminal_in_faith_trigger = { TRAIT = sodomite FAITH = scope:actor.faith GENDER_CHARACTER = scope:recipient }
				}
				AND = {
					scope:recipient = {
						has_trait = cannibal
					}
					NOT = {
						is_cannibal_trigger = yes
					}
					trait_is_criminal_in_faith_trigger = { TRAIT = cannibal FAITH = scope:actor.faith GENDER_CHARACTER = scope:recipient }
				}
			}
		}
		
		# Unity modifiers
            evaluate_action_decreasing_house_unity = {
                VALUE = 100
            }
                
		modifier = {
			factor = 0
			scope:recipient = {
				OR = {
					has_relation_friend = scope:actor
					has_relation_best_friend = scope:actor
				}
			}
		}
		
		modifier = {
			factor = 0
			scope:recipient = {
				is_ai = no
			}
		}
	}
}