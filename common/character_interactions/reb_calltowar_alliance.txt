call_ally_interaction = {
	category = interaction_category_diplomacy
	desc = call_ally_interaction_desc
	interface_priority = 60
	interface = call_ally
	special_interaction = call_ally_interaction
	popup_on_receive = yes
	pause_on_receive = yes
	icon = alliance

	greeting = positive
	notification_text = CALL_ALLY_NOTIFICATION

	is_shown = {
		scope:actor = {
			is_at_war = yes
		}
		scope:recipient = {
			OR = {
				is_allied_to = scope:actor
				AND = {
					this ?= scope:actor.diarch
					scope:actor = {
						any_character_war = { diarch_callable_in_internal_war_trigger = yes }
					}
				}
			}
		}
		scope:actor = { #If you can call them as a House Member then do that
			NOT = {
				is_character_interaction_valid = {
					recipient = scope:recipient
					interaction = call_house_member_to_war_interaction
				}
			}
		}
	}
	
	has_valid_target = {
		exists = scope:target
	}	

	has_valid_target_showing_failures_only = {
		scope:target = {
			is_war_leader = scope:actor
		}

		scope:actor = {
			trigger_if = {
				limit = {
					scope:target = {
						OR = {
							using_cb = undirected_great_holy_war
							using_cb = directed_great_holy_war
						}
					}
				}

				trigger_if = {
					limit = {
						this = scope:target.casus_belli.primary_attacker
					}
					#if it's a religious war the recipient has to be of the same faith
					custom_description = {
						text = is_of_wrong_faith_for_holy_war
						subject = scope:actor
						object = scope:recipient
						faith = scope:recipient.faith
					}
				}
				trigger_else = {
					custom_description = {
						text = is_of_attacker_faith_in_holy_war
						subject = scope:actor
						object = scope:recipient
						scope:target = { NOT = { primary_attacker.faith = scope:recipient.faith } }
					}
				}
			}
		}


		joiner_not_already_in_another_war_with_any_target_war_participants_trigger = {
			WARRIOR = scope:actor
			JOINER = scope:recipient
		}
	}

	
	is_valid_showing_failures_only = {
		
		scope:recipient = {
			is_ruler = yes
		}

		# Only War Leaders can call allies
		scope:actor = {
			custom_description = {
				text = must_be_war_leader
				any_character_war = {
					is_war_leader = scope:actor
				}
			}
		}

		# Cannot call the same character multiple times
		scope:actor = {
			custom_description = {
				text = cannot_call_same_character_multiple_times
				subject = scope:recipient
				any_character_war = {
					ALL_FALSE = {
						was_called = scope:recipient
						is_participant = scope:recipient
					}
				}
			}
		}

		can_potentially_call_ally_trigger = {
			WARRIOR = scope:actor
			JOINER = scope:recipient
		}

		# Cannot call a character of the "wrong" religion to a Great Holy War
		scope:actor = {
			trigger_if = {
				limit = {
					NOT = { faith = scope:recipient.faith }
				}
				custom_description = {
					text = is_of_wrong_faith_for_holy_war
					subject = scope:actor
					object = scope:recipient
					any_character_war = {
						NOR = {
							using_cb = undirected_great_holy_war
							using_cb = directed_great_holy_war
						}
					}
				}
			}
		}
	}

	can_be_picked = {
		can_join_war_liege_vassal_check_trigger = { WARRIOR = scope:actor JOINER = scope:recipient }

		scope:target = {
			is_war_leader = scope:actor

			# not already in target war
			custom_description = {
				text = join_war_interaction_already_in_target_war
				NOR = {
					any_war_attacker = { this = scope:recipient }
					any_war_defender = { this = scope:recipient }
				}
			}

			# Diarchs can only be called to internal wars.
			custom_tooltip = {
				text = call_ally_interaction.tt.diarchs_called_to_internal_wars
				trigger_if = {
					limit = { scope:recipient ?= scope:actor.diarch }
					primary_defender = scope:actor
					diarch_callable_in_internal_war_trigger = yes
				}
			}
		}
	}

	on_auto_accept = {
		scope:recipient = {
			trigger_event = call_ally.0001
		}
		scope:target = {
			if = {
				limit = {
					is_religious_war = yes
					scope:recipient = {
						any_active_accolade = {
							has_accolade_parameter = acclaimed_knight_piety_from_battle
						}
					}
				}
				scope:recipient = {
					add_piety = miniscule_piety_gain
				}
			}
			if = {
				limit = {
					is_religious_war = yes
					scope:recipient = {
						any_active_accolade = {
							has_accolade_parameter = acclaimed_knight_piety_from_battle_high
						}
					}
				}
				scope:recipient = {
					add_piety = minor_piety_gain
				}
			}
		}
	}
		
	on_accept = {
		call_ally_interaction_effect = yes

		save_scope_value_as = {
			name = call_ally_interaction
			value = yes
		}

		scope:actor = {
			hidden_effect = { #To nudge friendship
				if = {
					limit = {
						NOR = {
							has_relation_friend = scope:recipient
							has_relation_potential_friend = scope:recipient
						}
					}
					set_relation_potential_friend = scope:recipient
				}
			}
			trigger_event = call_ally.0100
            if = {
                limit = {
                    has_game_rule = enabled_extra_cost
                    is_ai = no
                }
				if = {
					limit = {
						scope:recipient.primary_title.tier = tier_barony
					}
					if = {
						limit = {
							has_game_rule = hard_difficulty
						}
						add_legitimacy = -20
					}
					else_if = {
						limit = {
							has_game_rule = very_hard_difficulty
						}
						add_legitimacy = -40
					}
					else_if = {
						limit = {
							has_game_rule = insane_difficulty
						}
						add_legitimacy = -60
					}
					else_if = {
						limit = {
							has_game_rule = ludicrous_difficulty
						}
						add_legitimacy = -80
					}
					else = {
						add_legitimacy = -10
					}
				}
				else_if = {
					limit = {
						scope:recipient.primary_title.tier = tier_county
					}
					if = {
						limit = {
							has_game_rule = hard_difficulty
						}
						add_legitimacy = -30
					}
					else_if = {
						limit = {
							has_game_rule = very_hard_difficulty
						}
						add_legitimacy = -60
					}
					else_if = {
						limit = {
							has_game_rule = insane_difficulty
						}
						add_legitimacy = -90
					}
					else_if = {
						limit = {
							has_game_rule = ludicrous_difficulty
						}
						add_legitimacy = -120
					}
					else = {
						add_legitimacy = -20
					}
				}
				else_if = {
					limit = {
						scope:recipient.primary_title.tier = tier_duchy
					}
					if = {
						limit = {
							has_game_rule = hard_difficulty
						}
						add_legitimacy = -40
					}
					else_if = {
						limit = {
							has_game_rule = very_hard_difficulty
						}
						add_legitimacy = -80
					}
					else_if = {
						limit = {
							has_game_rule = insane_difficulty
						}
						add_legitimacy = -120
					}
					else_if = {
						limit = {
							has_game_rule = ludicrous_difficulty
						}
						add_legitimacy = -160
					}
					else = {
						add_legitimacy = -30
					}
				}
				else_if = {
					limit = {
						scope:recipient.primary_title.tier = tier_kingdom
					}
						if = {
							limit = {
								has_game_rule = hard_difficulty
							}
							add_legitimacy = -50
						}
						else_if = {
							limit = {
								has_game_rule = very_hard_difficulty
							}
							add_legitimacy = -100
						}
						else_if = {
							limit = {
								has_game_rule = insane_difficulty
							}
							add_legitimacy = -150
						}
						else_if = {
							limit = {
								has_game_rule = ludicrous_difficulty
							}
							add_legitimacy = -200
						}
						else = {
							add_legitimacy = -40
						}
				}
				else_if = {
					limit = {
						scope:recipient.primary_title.tier = tier_empire
					}
					if = {
						limit = {
							has_game_rule = hard_difficulty
						}
						add_legitimacy = -75
					}
					else_if = {
						limit = {
							has_game_rule = very_hard_difficulty
						}
						add_legitimacy = -150
					}
					else_if = {
						limit = {
							has_game_rule = insane_difficulty
						}
						add_legitimacy = -225
					}
					else_if = {
						limit = {
							has_game_rule = ludicrous_difficulty
						}
						add_legitimacy = -300
					}
					else = {
						add_legitimacy = -50
					}
				}
                scope:recipient = {
                    add_opinion = {
                        modifier = calltowar_opinion
                        target = scope:actor
                        opinion = -40
                    }
                }
            }
		}
		scope:target = {
			if = {
				limit = {
					is_religious_war = yes
					scope:recipient = {
						any_active_accolade = {
							has_accolade_parameter = acclaimed_knight_piety_from_battle
						}
					}
				}
				scope:recipient = {
					add_piety = minor_piety_gain
				}
			}
			if = {
				limit = {
					is_religious_war = yes
					scope:recipient = {
						any_active_accolade = {
							has_accolade_parameter = acclaimed_knight_piety_from_battle_high
						}
					}
				}
				scope:recipient = {
					add_piety = medium_piety_gain
				}
			}
		}
	}
	
	on_decline = {
		#The war could theoretically end on the day the decline is sent
		if = {
			limit = {
				exists = scope:target
			}
			scope:target = {
				if = {
					limit = {
						is_attacker = scope:actor
					}
					scope:actor = {
						add_opinion = {
							modifier = rejected_call_to_offensive_war
							target = scope:recipient
						}
					}
					scope:recipient = {
						add_prestige_experience = major_prestige_loss
					}
				}
				else = {
					scope:actor = {
						add_opinion = {
							modifier = rejected_call_to_defensive_war
							target = scope:recipient
						}
					}
					scope:recipient = {
						add_prestige_experience = massive_prestige_loss
					}
				}
				hidden_effect = {
					if = {
						limit = {
							NOT = { was_called = scope:recipient }
						}
						set_called_to = scope:recipient
					}
				}
			}
			scope:actor = {
				trigger_event = call_ally.0101
			}
			
			# If we're a clan this interaction affects unity
			refuse_call_to_arms_add_clan_unity_effect = yes
		}
	}

	auto_accept = {
		OR = {
			# Always accept a call from a Spouse
			custom_description = {
				text = "recipient_is_spouse"
				subject = scope:actor
				object = scope:recipient
				scope:recipient = {
					is_spouse_of = scope:actor
					is_ai = yes
				}
			}
			# Always accept a call from the Heir
			custom_description = {
				text = "is_recipients_player_heir"
				subject = scope:actor
				object = scope:recipient
				
				exists = scope:recipient.player_heir
				scope:recipient = {
					player_heir = scope:actor
					is_close_or_extended_family_of = scope:actor # Only for family
					is_ai = yes
				}
			}
			# Always accept a call from the one you are heir of
			custom_description = {
				text = "is_player_heir"
				subject = scope:recipient
				object = scope:actor

				exists = scope:actor.player_heir
				scope:actor.player_heir = scope:recipient
				scope:actor = { # Shouldn't be able to force your liege to join just because you've not got any family...
					is_close_or_extended_family_of = scope:recipient
				}
				scope:recipient = {
					is_ai = yes
				}
			}
		}
	}
	
	ai_accept = {
		base = 20

		modifier = {  # Refuse call to conflicts of little benefit
			add = -1000
			desc = WONT_FIGHT_MEANINGLESS_REASON
			trigger_if = {
				limit = { exists = scope:target }
				scope:target = { using_cb = fp2_border_raid }
				scope:recipient = { # Unless they like going on raids
					NOR = {
						has_trait = viking
						has_trait = reaver
					}
				}
			}
			trigger_else = { always = no }
		}

		modifier = {  # Refuse call against Heir
			add = -1000
			exists = scope:recipient.player_heir
			trigger_if = {
				limit = { scope:target.casus_belli.primary_defender = scope:actor }
				scope:target.casus_belli.primary_attacker = scope:recipient.player_heir
			}
			trigger_else = {
				scope:target.casus_belli.primary_defender = scope:recipient.player_heir
			}
			desc = WONT_FIGHT_HEIR_REASON
		}

		modifier = {  # Refuse call against Spouse
			add = -1000
			scope:recipient = {
				trigger_if = {
					limit = { scope:target.casus_belli.primary_defender = scope:actor }
					any_spouse = {
						this = scope:target.casus_belli.primary_attacker
					}
				}
				trigger_else = {
					any_spouse = {
						this = scope:target.casus_belli.primary_defender
					}
				}
				
			}
			desc = WONT_FIGHT_SPOUSE_REASON
		}

		opinion_modifier = { # Opinion Factor
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 1.0
			desc = AI_OPINION_REASON
		}

		# Honor factor
		ai_value_modifier = {
			ai_honor = 1
			min = 0
		}

		modifier = {  # Tends to join defensive wars
			add = 50
			scope:target.casus_belli.primary_defender = scope:actor
			desc = DEFENSIVE_WAR_REASON
		}
		
		modifier = { # Same language
			add = 5
			desc = speaks_same_language_interaction_reason
			trigger = {
				scope:actor = {
					knows_language_of_culture = scope:recipient.culture
				}
			}
		}
		
		modifier = { # Shared Court Language (non-spoken)
			add = 10
			desc = foreign_realm_court_language_non_spoken_interaction_reason
			trigger = {
				scope:actor = {
					has_royal_court = yes
					NOT = { knows_court_language_of = this }
				}
				NOT = {
					scope:actor.top_liege = scope:recipient.top_liege
				}
				OR = {
					AND = {
						scope:recipient = {
							has_royal_court = yes
						}
						scope:actor = { # You share Court Language
							has_same_court_language = scope:recipient
						}
					}
					
					scope:recipient = { # The recipient doesn't have a royal court, but their liege does
						is_independent_ruler = no
						has_royal_court = no
						liege = {
							has_royal_court = yes
							has_same_court_language = scope:actor
						}
					}
					scope:recipient = { # The recipient doesn't have a royal court, but their liege's liege does, while their liege doesn't have a royal court
						is_independent_ruler = no
						has_royal_court = no
						exists = liege.liege
						liege = {
							is_independent_ruler = no
							has_royal_court = no
						}
						liege.liege = {
							has_royal_court = yes
							has_same_court_language = scope:actor
						}
					}
					scope:recipient = { # The recipient doesn't have a royal court, but their liege's liege's liege does, while their liege doesn't have a royal court
						is_independent_ruler = no
						has_royal_court = no
						exists = liege.liege
						exists = liege.liege.liege
						liege = {
							is_independent_ruler = no
							has_royal_court = no
						}
						liege.liege = {
							is_independent_ruler = no
							has_royal_court = no
						}
						liege.liege.liege = {
							has_royal_court = yes
							has_same_court_language = scope:actor
						}
					}
					scope:recipient = { # The recipient doesn't have a royal court, but their liege's liege's liege's liege does, while their liege doesn't have a royal court
						is_independent_ruler = no
						has_royal_court = no
						exists = liege.liege
						exists = liege.liege.liege
						exists = liege.liege.liege.liege
						liege = {
							is_independent_ruler = no
							has_royal_court = no
						}
						liege.liege = {
							is_independent_ruler = no
							has_royal_court = no
						}
						liege.liege.liege = {
							is_independent_ruler = no
							has_royal_court = no
						}
						liege.liege.liege.liege = {
							has_royal_court = yes
							has_same_court_language = scope:actor
						}
					}
				}
			}
		}
		
		modifier = { # Shared Court Language (spoken)
			add = 30
			desc = foreign_realm_court_language_spoken_interaction_reason
			trigger = {
				scope:actor = {
					has_royal_court = yes
					knows_court_language_of = this
				}
				NOT = {
					scope:actor.top_liege = scope:recipient.top_liege
				}
				OR = {
					AND = {
						scope:recipient = {
							has_royal_court = yes
						}
						scope:actor = { # You share Court Language
							has_same_court_language = scope:recipient
						}
					}
					
					scope:recipient = { # The recipient doesn't have a royal court, but their liege does
						is_independent_ruler = no
						has_royal_court = no
						liege = {
							has_royal_court = yes
							has_same_court_language = scope:actor
						}
					}
					scope:recipient = { # The recipient doesn't have a royal court, but their liege's liege does, while their liege doesn't have a royal court
						is_independent_ruler = no
						has_royal_court = no
						exists = liege.liege
						liege = {
							is_independent_ruler = no
							has_royal_court = no
						}
						liege.liege = {
							has_royal_court = yes
							has_same_court_language = scope:actor
						}
					}
					scope:recipient = { # The recipient doesn't have a royal court, but their liege's liege's liege does, while their liege doesn't have a royal court
						is_independent_ruler = no
						has_royal_court = no
						exists = liege.liege
						exists = liege.liege.liege
						liege = {
							is_independent_ruler = no
							has_royal_court = no
						}
						liege.liege = {
							is_independent_ruler = no
							has_royal_court = no
						}
						liege.liege.liege = {
							has_royal_court = yes
							has_same_court_language = scope:actor
						}
					}
					scope:recipient = { # The recipient doesn't have a royal court, but their liege's liege's liege's liege does, while their liege doesn't have a royal court
						is_independent_ruler = no
						has_royal_court = no
						exists = liege.liege
						exists = liege.liege.liege
						exists = liege.liege.liege.liege
						liege = {
							is_independent_ruler = no
							has_royal_court = no
						}
						liege.liege = {
							is_independent_ruler = no
							has_royal_court = no
						}
						liege.liege.liege = {
							is_independent_ruler = no
							has_royal_court = no
						}
						liege.liege.liege.liege = {
							has_royal_court = yes
							has_same_court_language = scope:actor
						}
					}
				}
			}
		}

		modifier = {  # Serious diarchs wish to support their liege
			add = 50
			desc = ENTRENCHED_REGENT_WILL_SUPPORT_LIEGE
			trigger_if = {
				limit = { scope:recipient ?= scope:actor.diarch }
				scope:actor = { has_diarchy_parameter = diarchy_type_is_entrenched_regency }
			}
			trigger_else = { always = no }
		}		

		compare_modifier = { # Likes fighting infidels
			trigger = {
				scope:recipient.faith = scope:actor.faith
				OR = {
					AND = {
						scope:target.casus_belli.primary_attacker = {
							this = scope:actor
							faith = {
								faith_hostility_level = {
									target = scope:target.casus_belli.primary_defender.faith
									value >= religious_cb_enabled_hostility_level
								}
							}
						}
					}
					AND = {
						scope:target.casus_belli.primary_defender = {
							this = scope:actor
							faith = {
								faith_hostility_level = {
									target = scope:target.casus_belli.primary_defender.faith
									value >= religious_cb_enabled_hostility_level
								}
							}
						}
					}
				}
			}
			target = scope:recipient
			value = ai_zeal
			desc = "ZEAL_AGAINST_INFIDELS"
			min = 0
			multiplier = 0.5
		}

		modifier = {  # Reluctant to attack another ally
			add = -50
			scope:target.casus_belli.primary_attacker = scope:actor
			scope:recipient = {
				is_allied_to = scope:target.casus_belli.primary_defender
			}
			desc = ATTACK_ON_ALLY_REASON
		}

		modifier = {  # Reluctant to defend against another ally
			add = -25
			scope:target.casus_belli.primary_defender = scope:actor
			scope:recipient = {
				is_allied_to = scope:target.casus_belli.primary_attacker
			}
			desc = WAR_WITH_ALLY_REASON
		}

		modifier = {  # Reluctant to join wars against religious brethren.
			add = -50
			NOT = { scope:recipient.faith = scope:actor.faith }
			scope:target.casus_belli.primary_attacker = scope:actor
			scope:target.casus_belli.primary_defender.faith = scope:recipient.faith
			scope:target.casus_belli.war = {
				OR = {
					using_cb = minor_religious_war
					using_cb = religious_war
					using_cb = major_religious_war
					using_cb = undirected_great_holy_war
					using_cb = directed_great_holy_war
				}
			}
			desc = WONT_ATTACK_RELIGIOUS_BRETHREN_REASON
		}

		modifier = { # Reluctant to join against Friends
			add = -50
			trigger_if = {
				limit = {
					scope:target.casus_belli.primary_defender = scope:actor
				}
				has_relation_friend = scope:target.casus_belli.primary_attacker
			}
			trigger_else = {
				has_relation_friend = scope:target.casus_belli.primary_defender
			}
		}

		modifier = { # Reluctant to join against Best Friends
			add = -100
			trigger_if = {
				limit = {
					scope:target.casus_belli.primary_defender = scope:actor
				}
				has_relation_best_friend = scope:target.casus_belli.primary_attacker
			}
			trigger_else = {
				has_relation_best_friend = scope:target.casus_belli.primary_defender
			}
		}
		modifier = { # Reluctant to join against Lovers
			add = -100
			trigger_if = {
				limit = {
					scope:target.casus_belli.primary_defender = scope:actor
				}
				has_relation_lover = scope:target.casus_belli.primary_attacker
			}
			trigger_else = {
				has_relation_lover = scope:target.casus_belli.primary_defender
			}
		}
		modifier = { # Reluctant to join against Soul mate
			add = -200
			trigger_if = {
				limit = {
					scope:target.casus_belli.primary_defender = scope:actor
				}
				has_relation_soulmate = scope:target.casus_belli.primary_attacker
			}
			trigger_else = {
				has_relation_soulmate = scope:target.casus_belli.primary_defender
			}
		}
		modifier = {  # Refuse call for hostages' safety
			any_home_court_hostage = {
				warden = {
					OR = {
						is_at_war_with = scope:actor
						any_ally = { is_at_war_with = scope:actor }
					}
				}
			}
			add = {
				value = 0
				every_home_court_hostage = {
					limit = {
						warden = {
							OR = {
								is_at_war_with = scope:actor
								any_ally = { is_at_war_with = scope:actor }
							}
						}
					}
					subtract = call_to_arms_hostage_value
				}
				multiply = 0.25
			}
			desc = HOSTAGE_ENEMY_CALL_TO_ARMS_REASON
		}

		fp3_struggle_resist_allied_wars_modifier = yes
	}

	# Score above 0 means the AI will call this ally. Note that DESIRED_WAR_SIDE_STRENGTH still applies and can prevent calling the ally
	ai_will_do = {
		base = 100
		
		modifier = { # If the player is at war, do not bother them with offensive calls
			scope:target.casus_belli.primary_attacker = scope:actor
			scope:recipient = {
				is_ai = no
				any_character_war = {
					primary_defender = scope:recipient
				}
			}
			factor = 0
		}
		
		modifier = { # Don't call players in against their heirs (they wouldn't accept the reverse situation... don't be a hypocrite)
			exists = scope:recipient.player_heir
			scope:recipient = {			
				is_ai = no
			}
			trigger_if = {
				limit = { scope:target.casus_belli.primary_defender = scope:actor }
				scope:target.casus_belli.primary_attacker = scope:recipient.player_heir
			}
			trigger_else = {
				scope:target.casus_belli.primary_defender = scope:recipient.player_heir
			}
			factor = 0
		}
		
		modifier = { # Same with spouses
			scope:recipient = {			
				is_ai = no
			}
			trigger_if = {
				limit = { scope:target.casus_belli.primary_defender = scope:actor }
				any_spouse = {
					this = scope:target.casus_belli.primary_attacker
				}
			}
			trigger_else = {
				any_spouse = {
					this = scope:target.casus_belli.primary_defender
				}
			}
			factor = 0
		}
		
		modifier = { # Don't call brand-new allies into old wars, at least until some time has elapsed.
			has_variable = delay_calling_recent_ally
			var:delay_calling_recent_ally = scope:recipient
			scope:target = {
				war_days >= 30
			}
			factor = 0

		}

		modifier = { # If the recipient is allied to both the attacker and the defender, the attacker shouldn't call
			scope:target.casus_belli.primary_attacker = scope:actor
			scope:target.casus_belli.primary_defender = {
				is_allied_to = scope:recipient
			}
			factor = 0
		}
	}
}

join_war_interaction = {
	category = interaction_category_diplomacy
	interface = interfere_in_war
	special_interaction = interfere_in_war_interaction
	popup_on_receive = yes
	desc = join_war_interaction_desc
	icon = alliance

	greeting = positive
	notification_text = join_war_interaction_notification

	is_shown = {
		scope:recipient = {
			is_at_war = yes
			NOR = {
				this = scope:actor
				is_at_war_with = scope:actor
			}
		}
	}

	is_valid_showing_failures_only = {

		# recipient is not in (any) war against your liege(s)
		trigger_if = {
			limit = { exists = scope:actor.liege }
			custom_description = {
				text = join_war_interaction_recipient_warring_with_my_liege
				subject = scope:recipient
				scope:actor = {
					NOT = {
						any_liege_or_above = {
							is_at_war_with = scope:recipient
						}
					}
				}
			}
		}

		# special exception for liege trying to put down his vassal's peasant revolt
		trigger_if = {
			limit = {
				scope:actor = {
					target_is_vassal_or_below = scope:recipient
				}
			}
			custom_description = {
				text = join_war_interaction_recipient_not_fighting_peasant_faction
				subject = scope:recipient
				scope:recipient = {
					any_war_enemy = {
						is_leading_faction_type = peasant_faction
					}
				}
			}
		}

		# recipient is ally or defending against a holy war
		trigger_else_if = {
			limit = {
				scope:actor = {
					NOT = { target_is_liege_or_above = scope:recipient }
				}
			}
			trigger_if = {
				limit = {
					scope:recipient = {
						any_character_war = {
							OR = {
								#Must be either the same faith as the character being holy warred...
								scope:recipient.faith = scope:actor.faith
								#... Or, same religion, *and* you couldn't holy war them yourself.
								AND = {
									scope:recipient.faith.religion = scope:actor.faith.religion
									scope:actor.faith = {
										faith_hostility_level = {
											target = scope:recipient.faith
											value < religious_cb_enabled_hostility_level
										}
									}
								}
								#... Or, the target is your liege and they are being attacked for your held title.
								AND = {
									scope:recipient = { target_is_liege_or_above = scope:actor }
									casus_belli = {
										any_target_title = {
											holder = {
												OR = {
													this = scope:actor
													is_vassal_or_below_of = scope:actor
												}
											}
										}
											
									}
								}
							}
							any_war_defender = { this = scope:recipient }
						}
					}
				}
				# Deliberately blank; we've passed the trigger and making a desc out of this doesn't make sense
			}
			# Special case for Iberians helping each other after FP2 Conciliation ending after FP2 Conciliation ending
			trigger_else_if = {
				limit = {
					fp2_struggle_conciliation_recipient_actor_involved_trigger = yes
					scope:recipient = {
						any_character_war = {
							primary_defender = scope:recipient
							primary_attacker = { save_temporary_scope_as = attacker_temp }
							fp2_struggle_conciliation_scope_uninvolved_trigger = { SCOPE = scope:attacker_temp }
						}
					}
				}
				# Deliberately blank; we've passed the trigger and making a desc out of this doesn't make sense
			}
			trigger_else = {
				custom_description = {
					text = join_war_interaction_recipient_not_ally
					subject = scope:recipient
					scope:recipient = {
						is_allied_to = scope:actor
					}
				}
			}
		}

		# recipient is liege
		trigger_else = {
			custom_description = {
				text = join_war_interaction_recipient_not_liege
				subject = scope:recipient
				scope:actor = {
					target_is_liege_or_above = scope:recipient
				}
			}
		}
	}
	
	can_be_picked = {
		exists = scope:target
		scope:target = {

			# recipient is war leader
			is_war_leader = scope:recipient

			# if holy war, recipient is defender of same faith
			# and not too far away
			trigger_if = {
				limit = { is_religious_war = yes }
				trigger_if = { #Only if you're not allies
					limit = {
						NOT = { scope:actor = { is_allied_to = scope:recipient } }
						NOR = {
							scope:recipient = { target_is_liege_or_above = scope:actor }
							casus_belli = {
								any_target_title = {
									exists = holder
									holder = {
										OR = {
											this = scope:actor
											is_vassal_or_below_of = scope:actor
										}
									}
								}
							}
						}
						# Special case for Iberians helping each other after FP2 Conciliation ending
						AND = {
							fp2_struggle_conciliation_recipient_actor_involved_trigger = no
							NOT = {
								fp2_struggle_conciliation_scope_uninvolved_trigger = { SCOPE = scope:target.primary_attacker }
							}
						} 
					}
					custom_description = {
						text = join_war_interaction_recipient_not_def_GHW
						subject = scope:recipient
						scope:recipient.faith.religion = scope:actor.faith.religion
						any_war_defender = { this = scope:recipient }
					}
				}
				casus_belli = {
					any_target_title = { save_temporary_scope_as = war_target }
				}
				custom_description = {
					text = join_war_interaction_recipient_too_distant
					subject = scope:war_target
					object = scope:war_target
					scope:actor = {
						realm_to_title_distance_squared = {
							title = scope:war_target
							value <= squared_distance_almost_massive # Approximately 1.5 HREs in distance away. Any further and does it really make sense for you to join what is essentially a regional power struggle?
						}
					}
				}
			}

			# If not holy war, special exception for liege trying to put down his vassal's peasant revolt.	
			trigger_if = {
				limit = {
					is_religious_war = no
					scope:actor = { target_is_vassal_or_below = scope:recipient }
					primary_defender = scope:recipient
					primary_attacker = {
						is_leading_faction_type = peasant_faction
					}
					# Special case for Iberians helping each other after FP2 Conciliation ending
					AND = {
						fp2_struggle_conciliation_recipient_actor_involved_trigger = no
						NOT = {
							fp2_struggle_conciliation_scope_uninvolved_trigger = { SCOPE = scope:target.primary_attacker }
						}
					}
				}
				always = yes
			}

			# ...otherwise, recipient must be an ally...
			trigger_else_if = {
				limit = {
					is_religious_war = no
					scope:actor = { NOT = { target_is_liege_or_above = scope:recipient } }
					# Special case for Iberians helping each other after FP2 Conciliation ending
					AND = {
						fp2_struggle_conciliation_recipient_actor_involved_trigger = no
						NOT = {
							fp2_struggle_conciliation_scope_uninvolved_trigger = { SCOPE = scope:target.primary_attacker }
						}
					}
				}
				custom_description = {
					text = join_war_interaction_recipient_not_ally
					subject = scope:recipient
					scope:actor = {
						is_allied_to = scope:recipient
					}
				}
				trigger_if = {
					limit = {
						scope:actor = {
							target_is_vassal_or_below = scope:recipient
							NOT = { is_allied_to = scope:recipient }
						}
					}
					# If they are an unallied vassal, inform the player that we could have aided them if this was a peasant revolt.
					custom_description = {
						text = join_war_interaction_recipient_not_fighting_peasant_faction
						subject = scope:recipient
						primary_defender = scope:recipient
						primary_attacker = {
							is_leading_faction_type = peasant_faction
						}
					}
				}
			}

			# ...or our liege.
			trigger_else_if = {
				limit = {
					is_religious_war = no
					scope:actor = { NOT = { is_allied_to = scope:recipient } }
				}
				# recipient is liege
				custom_description = {
					text = join_war_interaction_recipient_not_liege
					subject = scope:recipient
					scope:actor = {
						target_is_liege_or_above = scope:recipient
					}
				}
			}
			# making the default behavior explicit if no other trigger_(else_)ifs are valid
			trigger_else = {
				always = yes
			}
		}

		joiner_not_already_in_another_war_with_any_target_war_participants_trigger = {
			WARRIOR = scope:recipient
			JOINER = scope:actor
		}

		can_join_war_liege_vassal_check_trigger = { WARRIOR = scope:recipient JOINER = scope:actor }
	}

	on_accept = {
		scope:target = {
			hidden_effect = {
				set_called_to = scope:actor
			}
            
			if = {
				limit = { is_attacker = scope:recipient }
                scope:recipient = {
                    if = {
                        limit = {
                            has_game_rule = enabled_extra_cost
                            is_ai = no
                        }
                        scope:actor = {
                            add_opinion = {
                                modifier = calltowar_opinion
                                target = scope:recipient
                                opinion = -20
                            }
                        }
                        if = {
                            limit = {
                                scope:recipient.primary_title.tier = tier_barony
                            }
                            if = {
                                limit = {
                                    has_game_rule = enabled_extra_cost
                                }
								if = {
									limit = {
										has_game_rule = hard_difficulty
									}
									add_prestige = -50
									add_legitimacy = -10
								}
								else_if = {
									limit = {
										has_game_rule = very_hard_difficulty
									}
									add_prestige = -75
									add_legitimacy = -20
								}
								else_if = {
									limit = {
										has_game_rule = insane_difficulty
									}
									add_prestige = -100
									add_legitimacy = -30
								}
								else_if = {
									limit = {
										has_game_rule = ludicrous_difficulty
									}
									add_prestige = -125
									add_legitimacy = -40
								}
                                else = {
									add_prestige = -25
									add_legitimacy = -5
								}
                            }
                            else = {
                                add_prestige = -10
                            }
                        }
                        else_if = {
                            limit = {
                                scope:recipient.primary_title.tier = tier_county
                            }
                            if = {
                                limit = {
                                    has_game_rule = enabled_extra_cost
                                }
								if = {
									limit = {
										has_game_rule = hard_difficulty
									}
									add_prestige = minor_prestige_loss
									add_legitimacy = -15
								}
								else_if = {
									limit = {
										has_game_rule = very_hard_difficulty
									}
									add_prestige = -100
									add_legitimacy = -30
								}
								else_if = {
									limit = {
										has_game_rule = insane_difficulty
									}
									add_prestige = -150
									add_legitimacy = -45
								}
								else_if = {
									limit = {
										has_game_rule = ludicrous_difficulty
									}
									add_prestige = -250
									add_legitimacy = -60
								}
                                else = {
									add_prestige = minor_prestige_loss
									add_legitimacy = -10
								}
                            }
                            else = {
                                add_prestige = minor_prestige_loss
                            }
                        }
                        else_if = {
                            limit = {
                                scope:recipient.primary_title.tier = tier_duchy
                            }
                            if = {
                                limit = {
                                    has_game_rule = enabled_extra_cost
                                }
								if = {
									limit = {
										has_game_rule = hard_difficulty
									}
									add_prestige = medium_prestige_loss
									add_legitimacy = -20
								}
								else_if = {
									limit = {
										has_game_rule = very_hard_difficulty
									}
									add_prestige = medium_prestige_loss
									add_legitimacy = -40
								}
								else_if = {
									limit = {
										has_game_rule = insane_difficulty
									}
									add_prestige = -250
									add_legitimacy = -60
								}
								else_if = {
									limit = {
										has_game_rule = ludicrous_difficulty
									}
									add_prestige = -500
									add_legitimacy = -80
								}
                                else = {
									add_prestige = medium_prestige_loss
									add_legitimacy = -15
								}
                            }
                            else = {
                                add_prestige = medium_prestige_loss
                            }
                        }
                        else_if = {
                            limit = {
                                scope:recipient.primary_title.tier = tier_kingdom
                            }
                            if = {
                                limit = {
                                    has_game_rule = enabled_extra_cost
                                }
								if = {
									limit = {
										has_game_rule = hard_difficulty
									}
									add_prestige = major_prestige_loss
									add_legitimacy = -25
								}
								else_if = {
									limit = {
										has_game_rule = very_hard_difficulty
									}
									add_prestige = major_prestige_loss
									add_legitimacy = -50
								}
								else_if = {
									limit = {
										has_game_rule = insane_difficulty
									}
									add_prestige = -500
									add_legitimacy = -75
								}
								else_if = {
									limit = {
										has_game_rule = ludicrous_difficulty
									}
									add_prestige = -750
									add_legitimacy = -100
								}
                                else = {
									add_prestige = major_prestige_loss
									add_legitimacy = -20
								}
                            }
                            else = {
                                add_prestige = major_prestige_loss
                            }
                        }
                        else_if = {
                            limit = {
                                scope:recipient.primary_title.tier = tier_empire
                            }
                            if = {
                                limit = {
                                    has_game_rule = enabled_extra_cost
                                }
								if = {
									limit = {
										has_game_rule = hard_difficulty
									}
									add_prestige = massive_prestige_loss
									add_legitimacy = -40
								}
								else_if = {
									limit = {
										has_game_rule = very_hard_difficulty
									}
									add_prestige = massive_prestige_loss
									add_legitimacy = -80
								}
								else_if = {
									limit = {
										has_game_rule = insane_difficulty
									}
									add_prestige = massive_prestige_loss
									add_legitimacy = -120
								}
								else_if = {
									limit = {
										has_game_rule = ludicrous_difficulty
									}
									add_prestige = -1000
									add_legitimacy = -160
								}
                                else = {
									add_prestige = massive_prestige_loss
									add_legitimacy = -30
								}
                            }
                            else = {
                                add_prestige = massive_prestige_loss
                            }
                        }
                    }
                }
				add_attacker = scope:actor
				if = {
					limit = {
						OR = {
							scope:actor = {
								any_home_court_hostage = {
									warden ?= { is_defender_in_war = scope:target }
								}
							}
							scope:target = {
								any_war_defender = {
									any_warden_hostage = { home_court ?= scope:actor }
								}
							}
						}
					}
					custom_tooltip = hostage_execution_warning_tt
				}
			}
			else = {
				add_defender = scope:actor
				if = {
					limit = {
						OR = {
							scope:actor = {
								any_home_court_hostage = {
									warden ?= { is_attacker_in_war = scope:target }
								}
							}
							scope:target = {
								any_war_attacker = {
									any_warden_hostage = { home_court ?= scope:actor }
								}
							}
						}
					}
					custom_tooltip = hostage_execution_warning_tt
				}
			}
			if = {
				limit = {
					is_religious_war = yes
					scope:actor = {
						any_active_accolade = {
							has_accolade_parameter = acclaimed_knight_piety_from_battle
						}
					}
				}
				scope:actor = {
					add_piety = medium_piety_gain
				}
			}
			if = {
				limit = {
					is_religious_war = yes
					scope:actor = {
						any_active_accolade = {
							has_accolade_parameter = acclaimed_knight_piety_from_battle_high
						}
					}
				}
				scope:actor = {
					add_piety = major_piety_gain
				}
			}
		}
		scope:actor = {
			stress_impact = {
				craven = medium_stress_impact_gain
				shy = minor_stress_impact_gain
			}
		}
		scope:recipient = {
			if = {
				limit = {
					is_ai = yes
				}
				progress_towards_friend_effect = {
					CHARACTER = scope:actor
					OPINION = 0
					REASON = friend_alliance
				}
			}
			else = {
				hidden_effect = { #To nudge friendship
					if = {
						limit = {
							NOR = {
								has_relation_friend = scope:actor
								has_relation_potential_friend = scope:actor
							}
						}
						set_relation_potential_friend = scope:actor
					}
				}
			}
		}

		# If we're a clan this interaction affects unity - but only when we attemp to aid a house member against a non-house member
		if = {
			limit = {
				exists = scope:target
				scope:target = {
					OR = {
						AND = {
							primary_attacker = scope:recipient
							scope:recipient.house = scope:actor.house
							primary_defender = {
								NOT = { house = scope:actor.house }
							}
						}
						AND = {
							primary_defender = scope:recipient
							scope:recipient.house = scope:actor.house
							primary_attacker = {
								NOT = { house = scope:actor.house }
							}
						}
					}
				}
			}
			add_clan_unity_interaction_effect = {
				CHARACTER = scope:actor
				TARGET = scope:recipient
				VALUE = medium_unity_gain
				DESC = clan_unity_join_war.desc
				REVERSE_NON_HOUSE_TARGET = no
			}
		}
	}

	on_decline = {
		scope:actor = {
			trigger_event = char_interaction.0236
		}
	}

	auto_accept = yes

	ai_accept = {
		base = 100 # everyone wants help
	}
}