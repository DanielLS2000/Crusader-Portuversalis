lopc_join_court_interaction = {
	category = interaction_category_laamp
	interface_priority = 60

	desc = lopc_join_court_interaction_desc

	cooldown_against_recipient = { years = 10 }
	cooldown = { months = 3 }
	
	icon = icon_scheme_slander
	#icon = icon_gold
	common_interaction = yes
	greeting = positive
	notification_text = lopc_join_court_proposal

	answer_accept_key = SEND_GIFT_ACCEPT
	answer_reject_key = SEND_GIFT_REJECT

	#ai_targets = {
	#	ai_recipients = neighboring_rulers
	#	ai_recipients = contacts
	#}
	
	#ai_target_quick_trigger = {
	#	adult = yes
	#}
	#ai_frequency = 120

	is_shown = {
		scope:actor = {
			OR = {
				is_landless_adventurer = yes
				AND = {
					is_landed = no
					is_ruler = no
				}
				AND = {
					any_held_title = { is_noble_family_title = yes }
					scope:recipient = liege
				}
			}
			is_adult = yes
			NOT = {
				OR = {
					has_character_modifier = lopc_courtier_0
					has_character_modifier = lopc_courtier_1
					has_character_modifier = lopc_courtier_2
					has_character_modifier = lopc_courtier_3
					has_character_modifier = lopc_courtier_4
				}
			}
		}
		NOT = { 
			scope:recipient = scope:actor
		}
		scope:recipient = {
			is_landed = yes
		}
	}

	can_send = {
		custom_tooltip = {
			OR = {
				scope:actor = {
					location.province_owner = scope:recipient
					location = location.province_owner.capital_province
				}
				scope:actor = {
					any_held_title = { is_noble_family_title = yes }
					scope:recipient = liege
				}
			}
			text = join_court_interaction_correctlocation_tt
		}
	}

	on_accept = {
		scope:recipient = {
			save_scope_as = courtier_x_liege
		}
		scope:actor = {
			trigger_event = {
				id = lopc_event.0002
			}
		}
	}
	
	on_decline = {
		scope:actor = {
			remove_interaction_cooldown = lopc_join_court_interaction
			trigger_event = {
				id = lopc_event.0003
			}
		}
	}
	
	ai_accept = {
		base = -50
		modifier = { # Noble
			scope:actor = {
				any_held_title = { is_noble_family_title = yes }
			}
			add = 50
			desc = join_court_interaction_aibehavior_nobility_tt
		}
		opinion_modifier = { # Opinion Factor
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 0.5
			desc = AI_OPINION_REASON
		}
		#opinion_modifier = { # Opinion Factor
		#	who = scope:actor
		#	opinion_target = scope:secondary_actor
		#	multiplier = -0.5
		#	desc = AI_OPINION_REASON
		#}
		modifier = {
			add = {
				value = scope:actor.prestige_level
				multiply = 10
			}
			scope:actor.prestige_level >= 1
			desc = join_court_interaction_aibehavior_prestige_tt
		}
		modifier = {
			add = {
				value = scope:actor.piety_level
				multiply = 10
			}
			scope:actor = {
				piety_level >= 1
			}
			desc = ASK_FOR_CONVERSION_ACTOR_IS_PIOUS
		}
		modifier = {
			add = 15
			scope:actor = {
				OR = {
					stewardship >= 14
					martial >= 14
					learning >= 14
					diplomacy >= 14
					prowess >= 14
				}
			}
			desc = join_court_interaction_aibehavior_talented_tt
		}
		modifier = {
			add = 15
			scope:actor = {
				OR = {
					stewardship >= 24
					martial >= 24
					learning >= 24
					diplomacy >= 24
					prowess >= 24
				}
			}
			desc = join_court_interaction_aibehavior_verytalented_tt
		}
		modifier = {
			add = 10
			scope:actor = {
				knows_language_of_culture = scope:recipient.culture
			}
			desc = PURCHASE_LAND_SPEAKS_LANGUAGE_REASON
		}
		modifier = {
			add = -30
			scope:actor = {
				NOT = {
					knows_language_of_culture = scope:recipient.culture
					culture = scope:recipient.culture
				}
			}
			desc = PURCHASE_LAND_DOES_NOT_SPEAK_LANGUAGE_REASON
		}
		modifier = {
			add = 60
			scope:actor = {
				has_any_moderate_good_relationship_with_character_trigger = { CHARACTER = scope:recipient }
			}
			desc = join_court_interaction_aibehavior_relationship_tt
		}
		modifier = { #Different faith, no pluralism.
			desc = join_court_interaction_aibehavior_differentfaith_tt
			trigger = {
				scope:recipient = {
					NOR = { #Of two different faiths AND the potential vassal's faith is not pluralistic.
						faith = scope:actor.faith
						faith = { has_doctrine = doctrine_pluralism_pluralistic }
					}
				}
			}
			add = {
				value = -10
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_hostile_level
							}
						}
					}
					add = -10
				}
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_evil_level
							}
						}
					}
					add = -10
				}
			}
		}

		modifier = { #Different faith, pluralism.
			desc = join_court_interaction_aibehavior_differentfaith_tt
			trigger = {
				scope:recipient = {
					NOT = {
						faith = scope:actor.faith
					}
					NOT = {
						scope:actor.faith = { has_doctrine = doctrine_pluralism_pluralistic }
					}
					faith = { has_doctrine = doctrine_pluralism_pluralistic }
				}
			}
			add = {
				value = -5
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_hostile_level
							}
						}
					}
					add = -5
				}
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_evil_level
							}
						}
					}
					add = -5
				}
			}
		}

		modifier = { #Different faith, both have pluralism.
			desc = join_court_interaction_aibehavior_differentfaith_tt
			trigger = {
				scope:recipient = {
					NOT = {
						faith = scope:actor.faith
					}
					scope:actor.faith = { has_doctrine = doctrine_pluralism_pluralistic }
					faith = { has_doctrine = doctrine_pluralism_pluralistic }
				}
			}
			add = {
				value = -2
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_hostile_level
							}
						}
					}
					add = -2
				}
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_evil_level
							}
						}
					}
					add = -2
				}
			}
		}
		modifier = { #Title Rank
			desc = join_court_interaction_aibehavior_titlerank_tt
			add = {
				value = 0
				if = {
					limit = {
						highest_held_title_tier = tier_empire
					}
					add = -40
				}
				else_if = {
					limit = {
						highest_held_title_tier = tier_kingdom
					}
					add = -30
				}
				else_if = {
					limit = {
						highest_held_title_tier = tier_duchy
					}
					add = -20
				}
				else_if = {
					limit = {
						highest_held_title_tier = tier_county
					}
					add = -10
				}
			}
		}
		
		modifier = { # has imprisonment reason
			desc = join_court_interaction_aibehavior_criminal_tt
			trigger = {
				scope:recipient = {
					has_imprisonment_reason = scope:actor
				}
			}
			add = -50
		}

		# Already a courtier? (can happen if you join court via truly landless)
		modifier = {
			scope:actor = {
				is_courtier_of = scope:recipient
			}
			add = {
				value = 30
			}
			desc = join_court_interaction_aibehavior_courtier_tt
		}

		#Lowborn
		modifier = {
			scope:actor = {
				is_lowborn = yes
			}
			scope:recipient = {
				OR = {	
					is_lowborn = no
					has_trait = arbitrary
				}
				NOT = {
					has_trait = humble
				}
			}
			add = {
				value = -15
				if = {
					limit = {
						scope:recipient = {
							has_trait = arrogant
						}
					}
					multiply = 2
				}
			}
			desc = AI_LOWBORN
		}
	}
	
	ai_potential = {
		always = no
	}
	
	ai_min_reply_days = 1
	ai_max_reply_days = 7
	
	ai_will_do = {
		base = 0 # was 5 but seems like a bad idea
	}
}

lopc_seek_promotion_interaction = {
	category = interaction_category_laamp
	interface_priority = 60

	desc = lopc_seek_promotion_interaction_desc
	
	cooldown = { years = 1 }
	
	icon = icon_scheme_slander
	common_interaction = yes
	greeting = positive
	notification_text = SEND_GIFT_PROPOSAL

	answer_accept_key = SEND_GIFT_ACCEPT
	answer_reject_key = SEND_GIFT_REJECT

	#ai_targets = {
	#	ai_recipients = neighboring_rulers
	#	ai_recipients = contacts
	#}
	
	#ai_target_quick_trigger = {
	#	adult = yes
	#}

	is_shown = {
		#scope:actor = {
		#	any_relation = {
		#		type = lopc_employer
		#		is_independent_ruler = no
		#		save_scope_as = courtier_x_liege
		#	}
		#}
		scope:actor = {
			is_lopc_adventurer_courtier = yes
		}
		scope:recipient = {
			any_vassal = {
				has_relation_lopc_courtier = scope:actor
			}
		}
	}
	

	on_accept = {
		scope:actor = {
			trigger_event = {
				id = lopc_event.1004
			}
		}
	}
	
	on_decline = {
		scope:actor = {
			remove_interaction_cooldown = lopc_join_court_interaction
			trigger_event = {
				id = lopc_event.0003
			}
		}
	}
	
	ai_accept = {
		base = -50
		opinion_modifier = { # Opinion Factor
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 0.5
			desc = AI_OPINION_REASON
		}
		#opinion_modifier = { # Opinion Factor
		#	who = scope:actor
		#	opinion_target = scope:secondary_actor
		#	multiplier = -0.5
		#	desc = AI_OPINION_REASON
		#}
		modifier = {
			add = {
				value = scope:actor.prestige_level
				multiply = 10
			}
			scope:actor.prestige_level >= 1
			desc = PURCHASE_LAND_PRESTIGE_LEVEL_REASON
		}
		modifier = {
			add = {
				value = scope:actor.piety_level
				multiply = 10
			}
			scope:actor = {
				piety_level >= 1
			}
			desc = ASK_FOR_CONVERSION_ACTOR_IS_PIOUS
		}
		modifier = {
			add = 15
			scope:actor = {
				OR = {
					stewardship >= 14
					martial >= 14
					learning >= 14
					diplomacy >= 14
					prowess >= 14
				}
			}
			desc = join_court_interaction_aibehavior_talented_tt
		}
		modifier = {
			add = 15
			scope:actor = {
				OR = {
					stewardship >= 24
					martial >= 24
					learning >= 24
					diplomacy >= 24
					prowess >= 24
				}
			}
			desc = join_court_interaction_aibehavior_verytalented_tt
		}
		modifier = {
			add = 10
			scope:actor = {
				knows_language_of_culture = scope:recipient.culture
			}
			desc = PURCHASE_LAND_SPEAKS_LANGUAGE_REASON
		}
		modifier = {
			add = -30
			scope:actor = {
				NOT = {
					knows_language_of_culture = scope:recipient.culture
					culture = scope:recipient.culture
				}
			}
			desc = PURCHASE_LAND_DOES_NOT_SPEAK_LANGUAGE_REASON
		}
		modifier = {
			add = 60
			scope:actor = {
				has_any_moderate_good_relationship_with_character_trigger = { CHARACTER = scope:recipient }
			}
			desc = join_court_interaction_aibehavior_relationship_tt
		}
		modifier = { #Different faith, no pluralism.
			desc = join_court_interaction_aibehavior_differentfaith_tt
			trigger = {
				scope:recipient = {
					NOR = { #Of two different faiths AND the potential vassal's faith is not pluralistic.
						faith = scope:actor.faith
						faith = { has_doctrine = doctrine_pluralism_pluralistic }
					}
				}
			}
			add = {
				value = -10
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_hostile_level
							}
						}
					}
					add = -10
				}
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_evil_level
							}
						}
					}
					add = -10
				}
			}
		}

		modifier = { #Different faith, pluralism.
			desc = join_court_interaction_aibehavior_differentfaith_tt
			trigger = {
				scope:recipient = {
					NOT = {
						faith = scope:actor.faith
					}
					NOT = {
						scope:actor.faith = { has_doctrine = doctrine_pluralism_pluralistic }
					}
					faith = { has_doctrine = doctrine_pluralism_pluralistic }
				}
			}
			add = {
				value = -5
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_hostile_level
							}
						}
					}
					add = -5
				}
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_evil_level
							}
						}
					}
					add = -5
				}
			}
		}

		modifier = { #Different faith, both have pluralism.
			desc = join_court_interaction_aibehavior_differentfaith_tt
			trigger = {
				scope:recipient = {
					NOT = {
						faith = scope:actor.faith
					}
					scope:actor.faith = { has_doctrine = doctrine_pluralism_pluralistic }
					faith = { has_doctrine = doctrine_pluralism_pluralistic }
				}
			}
			add = {
				value = -2
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_hostile_level
							}
						}
					}
					add = -2
				}
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_evil_level
							}
						}
					}
					add = -2
				}
			}
		}
		modifier = { #Title Rank
			desc = join_court_interaction_aibehavior_titlerank_tt
			add = {
				value = 0
				if = {
					limit = {
						highest_held_title_tier = tier_empire
					}
					add = -40
				}
				else_if = {
					limit = {
						highest_held_title_tier = tier_kingdom
					}
					add = -30
				}
				else_if = {
					limit = {
						highest_held_title_tier = tier_duchy
					}
					add = -20
				}
				else_if = {
					limit = {
						highest_held_title_tier = tier_county
					}
					add = -10
				}
			}
		}
		modifier = { # has imprisonment reason
			desc = join_court_interaction_aibehavior_criminal_tt
			trigger = {
				scope:recipient = {
					has_imprisonment_reason = scope:actor
				}
			}
			add = -50
		}
		modifier = { # Courtier experience
			desc = join_court_interaction_aibehavior_courtierrank_tt
			add = {
				value = 0
				if = {
					limit = {
						scope:actor = { has_character_modifier = lopc_courtier_0 }
					}
					add = 5
				}
				else_if = {
					limit = {
						scope:actor = { has_character_modifier = lopc_courtier_1 }
					}
					add = 10
				}
				else_if = {
					limit = {
						scope:actor = { has_character_modifier = lopc_courtier_2 }
					}
					add = 15
				}
				else_if = {
					limit = {
						scope:actor = { has_character_modifier = lopc_courtier_3 }
					}
					add = 20
				}
			}
		}
		
		modifier = { # has imprisonment reason
			desc = join_court_interaction_aibehavior_criminal_tt
			trigger = {
				scope:recipient = {
					has_imprisonment_reason = scope:actor
				}
			}
			add = -50
		}
	}
	
	ai_potential = {
		always = no
	}
	
	ai_min_reply_days = 1
	ai_max_reply_days = 7
}

lopc_request_leave_interaction = {
	category = interaction_category_laamp
	interface_priority = 60

	desc = lopc_request_leave_interaction_desc
	
	cooldown = { years = 1 }
	
	icon = guest
	common_interaction = yes
	greeting = positive
	notification_text = SEND_GIFT_PROPOSAL

	answer_accept_key = SEND_GIFT_ACCEPT
	answer_reject_key = SEND_GIFT_REJECT

	ai_targets = {
		ai_recipients = neighboring_rulers
		ai_recipients = contacts
	}
	
	ai_target_quick_trigger = {
		adult = yes
	}
	ai_frequency = 120

	is_shown = {
		#scope:actor = {
		#	any_relation = {
		#		type = lopc_employer
		#		is_independent_ruler = no
		#		save_scope_as = courtier_x_liege
		#	}
		#}
		scope:actor = {
			is_lopc_adventurer_courtier = yes
			has_relation_lopc_employer = scope:recipient
		}
	}
	
	send_option = {
		is_valid = {
			scope:actor = {
				has_usable_hook = scope:recipient
			}
		}
		flag = hook
		localization = SCHEME_HOOK
	}
	send_options_exclusive = no
	

	on_accept = {
		scope:actor = {
			if = {
				limit = { always = scope:hook }
				scope:actor = { use_hook = scope:recipient }
			}
			custom_label = lopc_courtier_x_requested_leave_label
			trigger_event = {
				id = lopc_event.0005
			}
			if = {
				limit = { has_character_modifier = lopc_absent_courtier }
				remove_character_modifier = lopc_absent_courtier
			}
			add_character_flag = {
				flag = lopc_courtier_x_on_leave
				years = 1
			}
			add_character_flag = {
				flag = lopc_courtier_x_requested_leave
				years = 4
			}
		}
		scope:recipient = {
			add_opinion = {
				target = scope:actor 
				opinion = -10
				modifier = requested_leave_opinion 
			}
		}
	}
	
	on_decline = {
		scope:actor = {
			trigger_event = {
				id = lopc_event.0006
			}
		}
	}
	
	ai_accept = {
		base = -25
		opinion_modifier = { # Opinion Factor
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 0.5
			desc = AI_OPINION_REASON
		}
		#opinion_modifier = { # Opinion Factor
		#	who = scope:actor
		#	opinion_target = scope:secondary_actor
		#	multiplier = -0.5
		#	desc = AI_OPINION_REASON
		#}
		modifier = {
			add = 10
			scope:actor = {
				has_any_moderate_good_relationship_with_character_trigger = { CHARACTER = scope:recipient }
			}
			desc = join_court_interaction_aibehavior_relationship_tt
		}
		
		modifier = { # has imprisonment reason
			desc = join_court_interaction_aibehavior_criminal_tt
			trigger = {
				scope:recipient = {
					has_imprisonment_reason = scope:actor
				}
			}
			add = -50
		}
		modifier = { # you requested leave less than 4 years ago
			desc = join_court_interaction_aibehavior_requestedleaverecently_tt
			trigger = {
				scope:actor = {
					has_character_flag = lopc_courtier_x_requested_leave
				}
			}
			add = -30
		}
		modifier = { # Used a hook
			trigger = { always = scope:hook }
			add = 100
		}
	}
	
	ai_potential = {
		always = no
	}
	
	ai_min_reply_days = 1
	ai_max_reply_days = 7
}


lopc_treat_patient_interaction = {
	category = interaction_category_laamp
	interface_priority = 60

	desc = lopc_treat_patient_interaction_desc
	
	cooldown = { years = 1 }
	
	icon = debug_good
	common_interaction = yes
	greeting = positive
	notification_text = lopc_treat_patient_PROPOSAL

	answer_accept_key = SEND_GIFT_ACCEPT
	answer_reject_key = SEND_GIFT_REJECT
	
	#ai_target_quick_trigger = {
	#	adult = yes
	#}
	#ai_frequency = 120

	is_shown = {
		scope:actor = {
			OR = {
				is_lopc_adventurer_courtier = yes
				is_lopc_adventurer_special_courtier = yes
			}
			has_court_position = court_physician_court_position
		}
	}
	
	is_valid = {
		scope:recipient = {
			OR = {
				this = scope:actor.liege
				this.liege = scope:actor.liege
			}
			OR = {
				has_treatable_disease_trigger = yes
				has_wounds_trigger = yes
			}
		}
	}
	

	on_accept = {
		scope:actor = {
			begin_scheme_with_agents_effect = {
				SCHEME_TYPE = lopc_physician_service
				TARGET_TYPE = target_character
				TARGET_SCOPE = scope:recipient
				# Success.
				AGENT_1 = agent_physic 
				AGENT_2 = agent_alchemist  
				# Speed.
				AGENT_3 = agent_supplier 
				AGENT_4 = lopc_agent_assistant 
				AGENT_5 = lopc_agent_assistant 
			}
		}
	}
	
	on_decline = {
		scope:actor = {
			trigger_event = {
				id = lopc_event.0006
			}
		}
	}
	
	ai_accept = {
		base = -50
		opinion_modifier = { # Opinion Factor
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 0.5
			desc = AI_OPINION_REASON
		}
		#opinion_modifier = { # Opinion Factor
		#	who = scope:actor
		#	opinion_target = scope:secondary_actor
		#	multiplier = -0.5
		#	desc = AI_OPINION_REASON
		#}
		modifier = {
			add = 10
			scope:actor = {
				has_any_moderate_good_relationship_with_character_trigger = { CHARACTER = scope:recipient }
			}
			desc = join_court_interaction_aibehavior_relationship_tt
		}
		
		modifier = { # is paranoid
			desc = treat_patient_interaction_aibehavior_paranoid_tt
			trigger = {
				scope:recipient = {
					has_trait = paranoid
				}
			}
			add = -10
		}
		modifier = { # I need treatment
			desc = treat_patient_interaction_aibehavior_needtreatment_tt
			trigger = {
				scope:recipient = {
					lopc_needs_treatment = yes
				}
			}
			add = 40
		}
		modifier = { # You are this court's physician
			desc = treat_patient_interaction_aibehavior_myphysician_tt
			trigger = {
				scope:recipient = {
					OR = {
						is_courtier_of  = scope:actor.liege
						this = scope:actor.liege
					}
				}
			}
			add = 10
		}
		modifier = {
			desc = treat_patient_interaction_aibehavior_aptitude_tt
			add = {
				value = -25
				if = {
					limit = { scope:actor = { has_trait = lifestyle_physician } }
					add = 25
				}
				if = {
					limit = { 
						scope:actor = {
							has_trait = lifestyle_physician
							has_trait_xp = {
								trait = lifestyle_physician
								value >= 50
							}
						}
					}
					add = 10
				}
				if = {
					limit = { 
						scope:actor = {
							has_trait = lifestyle_physician
							has_trait_xp = {
								trait = lifestyle_physician
								value >= 100
							}
						}
					}
					add = 10
				}
			}
		}
	}
	
	ai_potential = {
		always = no
	}
	
	#ai_min_reply_days = 1
	#ai_max_reply_days = 7
	
	#ai_will_do = {
	#	base = 5
	#}
}

lopc_present_treasure_interaction = { # Like gifting an artifact but only for your employer and provides prestige and renown
	category = interaction_category_laamp
	interface_priority = 94

	desc = lopc_present_treasure_interaction_desc
	
	cooldown = { months = 2 }
	icon = artisan_inspiration

	target_type = artifact
	target_filter = actor_artifacts

	greeting = positive
	notification_text = GIFT_ARTIFACT_PROPOSAL

	answer_accept_key = GIFT_ARTIFACT_ACCEPT
	answer_reject_key = GIFT_ARTIFACT_REJECT
	
	ai_targets = {
		ai_recipients = scripted_relations
		ai_recipients = liege
		ai_recipients = spouses
		ai_recipients = vassals
	}
	ai_targets = {
		ai_recipients = neighboring_rulers
		ai_recipients = peer_vassals
		max = 10
	}
	ai_targets = {
		ai_recipients = family
		ai_recipients = children
		ai_recipients = dynasty
		max = 20
	}
	ai_target_quick_trigger = {
		adult = yes
	}
	ai_frequency = 84

	can_be_picked_artifact = {
		trigger_if = {
			limit = {
				scope:actor = {
					is_ai = no
				}
			}
			scope:target = {
				is_equipped = no
			}
		}
		scope:actor = {
			any_character_artifact = {
				this = scope:target
			}
		}
		#Artifacts locked from being giftable by a variable
		scope:target = {
			NOR = {
				has_variable = 1025_treasure_map
				has_variable = ungiftable
			}
		}
	}


	#You can't give yourself a gift, even if it should count as self-care
	is_shown = {
		NOT = {
			scope:recipient = scope:actor
		}
		scope:actor = {
			has_any_artifact = yes
			is_lopc_adventurer_courtier = yes
			has_relation_lopc_employer = scope:recipient
		}
	}

	is_valid_showing_failures_only = {
		# needs to have an artifact to give away
		scope:recipient = { is_busy_in_events_localised = yes }
		scope:actor = {
			NOT = {
				is_at_war_with = scope:recipient
			}
			is_imprisoned = no
			trigger_if = {
				limit = {
					is_ai = no
				}
				custom_description = {
					text = "any_unequipped_artifact_tt"
					any_character_artifact = {
						is_equipped = no
					}
				}
			}
		}
		trigger_if = {
			limit = {
				exists = scope:target.var:banner_dynasty
				exists = scope:recipient.dynasty
			}
			custom_description = {
				text = "gift_artifact_dynasty_banner_head_tt"
				scope:recipient = scope:target.var:banner_dynasty.dynast
			}
		}
	}

	on_accept = {
		# Warning for multiple gifts
		if = {
			limit = {
				scope:recipient = {
					has_opinion_modifier = {
						target = scope:actor
						modifier = gift_artifact_opinion
					}
				}
			}
			custom_tooltip = ALREADY_SENT_GIFT_WARNING
		}
		# Struggle Catalyst
		if = { # Struggle Catalyst
			limit = {
				scope:actor = {
					any_character_struggle = {
						involvement = involved
						activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
							CATALYST = catalyst_gift_independent_ruler
							CHAR = scope:recipient
						}
					}
				}
			}
			hidden_effect = {
				scope:actor = {
					every_character_struggle = {
						involvement = involved
						activate_struggle_catalyst = {
							catalyst = catalyst_gift_independent_ruler
							character = scope:actor
						}
					}
				}
			}
		}
		else_if = {
			limit = {
				fp3_struggle_involves_one_supporter_and_one_detractor = {
					FIRST = scope:actor
					SECOND = scope:recipient
				}
				scope:actor = {
					any_character_struggle = {
						#involvement = involved
						activate_struggle_catalyst_secondary_character_involvement_either_trigger = {
							CATALYST = catalyst_gift_supporter_detractor_ruler
							CHAR = scope:recipient
						}
					}
				}
			}
			hidden_effect = {
				scope:actor = {
					every_character_struggle = {
						#involvement = involved
						limit = {
							activate_struggle_catalyst_secondary_character_involvement_either_trigger = {
								CATALYST = catalyst_gift_supporter_detractor_ruler
								CHAR = scope:recipient
							}
						}
						activate_struggle_catalyst = {
							catalyst = catalyst_gift_supporter_detractor_ruler
							character = scope:actor
						}
						log_debug_variable_for_persian_struggle_effect = { VAR = concession_catalyst_gift_supporter_detractor_ruler }
					}
				}
			}
		}

		scope:target = {
			set_variable = {
				name = suppress_artifact_notifications
				value = yes
				days = 1
			}
			set_variable = { name = gifted_artifact value = yes days = 9125 }
		}
		scope:recipient = {
			# Verify that they could become friend
			if = {
				limit = {
					NAND = {
						has_relation_friend = scope:actor
						has_relation_lover = scope:actor
						has_relation_soulmate = scope:actor
						has_relation_best_friend = scope:actor
					}
				}
				gifting_leads_towards_friendship_effect = yes
			}
		}
		scope:actor = {
			send_interface_toast = {
				type = event_toast_effect_neutral
				title = gift_artifact_interaction_notification
				left_icon = scope:recipient
				right_icon = scope:target
				scope:recipient = {
					if = {
						limit = { scope:target = { can_be_claimed_by = scope:recipient } }
						if = {
							limit = { any_personal_claimed_artifact = { this = scope:target } }
							show_as_tooltip = { remove_personal_artifact_claim = scope:target }
						}
						else = { show_as_tooltip = { house = { remove_house_artifact_claim = scope:target } } }
					}
				}
				
				scope:target = { set_owner = scope:recipient }

				
				if = {
					limit = {
						scope:target = { is_unique = yes }
					}
					add_clan_unity_interaction_effect = {
						CHARACTER = scope:actor
						TARGET = scope:recipient
						VALUE = medium_unity_gain
						DESC = clan_unity_given_artifact.desc
						REVERSE_NON_HOUSE_TARGET = no
					}
					stress_impact = {
						greedy = major_stress_impact_gain
						generous = major_stress_impact_loss
					}
				}
				else_if = {# Unity goes here, too!
					limit = { scope:target = { rarity = masterwork } }
					add_clan_unity_interaction_effect = {
						CHARACTER = scope:actor
						TARGET = scope:recipient
						VALUE = minor_unity_gain
						DESC = clan_unity_given_artifact.desc
						REVERSE_NON_HOUSE_TARGET = no
					}
					stress_impact = {
						greedy = minor_stress_impact_gain
						generous = minor_stress_impact_loss
					}
				}
				else_if = {
					limit = { scope:target = { rarity = famed } }
					add_clan_unity_interaction_effect = {
						CHARACTER = scope:actor
						TARGET = scope:recipient
						VALUE = minor_unity_gain
						DESC = clan_unity_given_artifact.desc
						REVERSE_NON_HOUSE_TARGET = no
					}
					stress_impact = {
						greedy = medium_stress_impact_gain
						generous = medium_stress_impact_loss
					}
				}
				else_if = {
					limit = { scope:target = { rarity = illustrious } }
					add_clan_unity_interaction_effect = {
						CHARACTER = scope:actor
						TARGET = scope:recipient
						VALUE = minor_unity_gain
						DESC = clan_unity_given_artifact.desc
						REVERSE_NON_HOUSE_TARGET = no
					}
					stress_impact = {
						greedy = major_stress_impact_gain
						generous = major_stress_impact_loss
					}
				}
				if = {
					limit = { scope:recipient = { is_ai = yes } }
					reverse_add_opinion = {
						target = scope:recipient
						modifier = gift_artifact_opinion
						opinion = gift_artifact_opinion
					}
				}
				# Present treasure renown+prestige award
				scope:actor = {
					if = {
						limit = { #the better the artifact, the more prestige you gain
							scope:target = { rarity = illustrious }
						}
						change_lopc_performance = { amount = 5 }
						add_prestige = 200
						dynasty ?= {
							add_dynasty_prestige = 100
						}
					}
					else_if = {
						limit = {
							scope:target = { rarity = famed }
						}
						change_lopc_performance = { amount = 4 }
						add_prestige = 150
						dynasty ?= {
							add_dynasty_prestige = 75
						}
					}
					else_if = {
						limit = {
							scope:target = { rarity = masterwork }
						}
						change_lopc_performance = { amount = 3 }
						add_prestige = 100
						dynasty ?= {
							add_dynasty_prestige = 50
						}
					}
					else = {
						change_lopc_performance = { amount = 2 }
						add_prestige = 50
						dynasty ?= {
							add_dynasty_prestige = 25
						}
					}				 
				}
			}

			# Warning for low opinion gain
			if = {
				limit = {
					scope:target = { artifact_durability <= define:NInventory|ARTIFACT_LOW_DURABILITY }
				}
				custom_tooltip = artifact_gift_low_durability_tt
			}
			if = {
				limit = {
					scope:target = { artifact_durability <= define:NInventory|ARTIFACT_VERY_LOW_DURABILITY }
				}
				custom_tooltip = artifact_gift_very_low_durability_tt
			}
			if = {
				limit = {
					scope:target = { 
						OR = {
							AND = {
								has_variable = banner_house
								NOT = { var:banner_house = scope:recipient.house }
							}
							AND = {
								has_variable = banner_dynasty
								NOT = { var:banner_dynasty = scope:recipient.dynasty }
							}
						}
					}
				}
				custom_tooltip = artifact_gift_useless_banner_tt
			}
			else_if = {
				limit = {
					scope:recipient = {
						NOR = {
							can_equip_artifact = scope:target
							can_benefit_from_artifact = scope:target
						}
					}
				}
				custom_tooltip = artifact_gift_useless_tt
			}
			else_if = {
				limit = {
					scope:recipient = {
						NOT = { can_equip_artifact = scope:target }
					}
				}
				custom_tooltip = artifact_gift_equip_tt
			}
			else_if = {
				limit = {
					scope:recipient = {
						NOT = { can_benefit_from_artifact = scope:target }
					}
				}
				custom_tooltip = artifact_gift_benefit_tt
			}
			if = {
				limit = { scope:recipient.liege = scope:actor }
				custom_tooltip = artifact_gift_vassal_tt
			}
			if = {
				limit = { scope:recipient = scope:actor.faith.religious_head }
				custom_tooltip = artifact_gift_religious_head_tt
			}
		}
		scope:recipient = {
			hidden_effect = {
				send_interface_toast = {
					type = event_toast_effect_neutral
					title = gift_artifact_interaction_notification
					left_icon = scope:actor
					right_icon = scope:target

					show_as_tooltip = {
						scope:target = { set_owner = scope:recipient }
						if = {
							limit = { is_ai = yes }
							add_opinion = {
								target = scope:actor
								modifier = gift_artifact_opinion
								opinion = gift_artifact_opinion
							}
						}

						# Unity stuff, scales with tier # If we're a clan this interaction affects unity
						if = { # In a better world, this would be a switch
							limit = { scope:target = { rarity = Masterwork } } # todo_cd_polish, make the UI show this before you gift
							add_clan_unity_interaction_effect = {
								CHARACTER = scope:actor
								TARGET = scope:recipient
								VALUE = minor_unity_gain
								DESC = clan_unity_given_artifact.desc
								REVERSE_NON_HOUSE_TARGET = no
							}
						}
						else_if = {
							limit = { scope:target = { rarity = Famed } }
							add_clan_unity_interaction_effect = {
								CHARACTER = scope:actor
								TARGET = scope:recipient
								VALUE = medium_unity_gain
								DESC = clan_unity_given_artifact.desc
								REVERSE_NON_HOUSE_TARGET = no
							}
						}
						else_if = {
							limit = { scope:target = { rarity = Illustrious } }
							add_clan_unity_interaction_effect = {
								CHARACTER = scope:actor
								TARGET = scope:recipient
								VALUE = major_unity_gain
								DESC = clan_unity_given_artifact.desc
								REVERSE_NON_HOUSE_TARGET = no
							}
						}
					}
				}
				if = {
					limit = {
						is_ruler = no
						trigger_if = {
							limit = {
								scope:target = {
									artifact_slot_type = primary_armament
								}
							}
							OR = {
								NOT = {
									any_equipped_character_artifact = {
										artifact_slot_type = primary_armament
									}
								}
								AND = {
									scope:target = {
										rarity = illustrious
									}
									any_equipped_character_artifact = {
										artifact_slot_type = primary_armament
										NOT = {
											rarity = illustrious
										}
									}
								}
								AND = {
									scope:target = {
										rarity = famed
									}
									any_equipped_character_artifact = {
										artifact_slot_type = primary_armament
										NOR = {
											rarity = illustrious
											rarity = famed
										}
									}
								}
								AND = {
									scope:target = {
										rarity = masterwork
									}
									any_equipped_character_artifact = {
										artifact_slot_type = primary_armament
										NOR = {
											rarity = illustrious
											rarity = famed
											rarity = masterwork
										}
									}
								}
								AND = {
									scope:target = {
										rarity = common
									}
									any_equipped_character_artifact = {
										artifact_slot_type = primary_armament
										NOR = {
											rarity = illustrious
											rarity = famed
											rarity = masterwork
											rarity = common
										}
									}
								}
							}
						}
						trigger_if = {
							limit = {
								scope:target = {
									artifact_slot_type = armor
								}
							}
							OR = {
								NOT = {
									any_equipped_character_artifact = {
										artifact_slot_type = armor
									}
								}
								AND = {
									scope:target = {
										rarity = illustrious
									}
									any_equipped_character_artifact = {
										artifact_slot_type = armor
										NOT = {
											rarity = illustrious
										}
									}
								}
								AND = {
									scope:target = {
										rarity = famed
									}
									any_equipped_character_artifact = {
										artifact_slot_type = armor
										NOR = {
											rarity = illustrious
											rarity = famed
										}
									}
								}
								AND = {
									scope:target = {
										rarity = masterwork
									}
									any_equipped_character_artifact = {
										artifact_slot_type = armor
										NOR = {
											rarity = illustrious
											rarity = famed
											rarity = masterwork
										}
									}
								}
								AND = {
									scope:target = {
										rarity = common
									}
									any_equipped_character_artifact = {
										artifact_slot_type = armor
										NOR = {
											rarity = illustrious
											rarity = famed
											rarity = masterwork
											rarity = common
										}
									}
								}
							}
						}
						trigger_if = {
							limit = {
								scope:target = {
									artifact_slot_type = regalia
								}
							}
							OR = {
								NOT = {
									any_equipped_character_artifact = {
										artifact_slot_type = regalia
									}
								}
								AND = {
									scope:target = {
										rarity = illustrious
									}
									any_equipped_character_artifact = {
										artifact_slot_type = regalia
										NOT = {
											rarity = illustrious
										}
									}
								}
								AND = {
									scope:target = {
										rarity = famed
									}
									any_equipped_character_artifact = {
										artifact_slot_type = regalia
										NOR = {
											rarity = illustrious
											rarity = famed
										}
									}
								}
								AND = {
									scope:target = {
										rarity = masterwork
									}
									any_equipped_character_artifact = {
										artifact_slot_type = regalia
										NOR = {
											rarity = illustrious
											rarity = famed
											rarity = masterwork
										}
									}
								}
								AND = {
									scope:target = {
										rarity = common
									}
									any_equipped_character_artifact = {
										artifact_slot_type = regalia
										NOR = {
											rarity = illustrious
											rarity = famed
											rarity = masterwork
											rarity = common
										}
									}
								}
							}
						}
						trigger_if = {
							limit = {
								scope:target = {
									artifact_slot_type = helmet
								}
							}
							OR = {
								NOT = {
									any_equipped_character_artifact = {
										artifact_slot_type = helmet
									}
								}
								AND = {
									scope:target = {
										rarity = illustrious
									}
									any_equipped_character_artifact = {
										artifact_slot_type = helmet
										NOT = {
											rarity = illustrious
										}
									}
								}
								AND = {
									scope:target = {
										rarity = famed
									}
									any_equipped_character_artifact = {
										artifact_slot_type = helmet
										NOR = {
											rarity = illustrious
											rarity = famed
										}
									}
								}
								AND = {
									scope:target = {
										rarity = masterwork
									}
									any_equipped_character_artifact = {
										artifact_slot_type = helmet
										NOR = {
											rarity = illustrious
											rarity = famed
											rarity = masterwork
										}
									}
								}
								AND = {
									scope:target = {
										rarity = common
									}
									any_equipped_character_artifact = {
										artifact_slot_type = helmet
										NOR = {
											rarity = illustrious
											rarity = famed
											rarity = masterwork
											rarity = common
										}
									}
								}
							}
						}
					}
					scope:target = {
						equip_artifact_to_owner_replace = yes
					}
				}
			}
		}
	}

	auto_accept = no
	
	ai_potential = {
		always = no
	}
	
	ai_accept = {
		base = 0
		modifier = {
			add = 85
			desc = ARTIFACT_REASON
		}
		modifier = {
			add = -80
			NOT = {
				can_equip_artifact = scope:target
			}
			desc = ARTIFACT_NOT_EQUIPPABLE_REASON
		}
		modifier = {
			add = -40
			NOT = {
				can_benefit_from_artifact = scope:target
			}
			desc = ARTIFACT_NOT_BENEFIT_REASON
		}
		modifier = {
			add = -500
			scope:target = {
				has_variable = unwanted_artifact
			}
			#No harm in reusing the wording
			desc = ARTIFACT_CURSED_REASON
		}
		modifier = {
			add = -1000
			scope:target = {
				has_variable = cursed_artifact
			}
			desc = ARTIFACT_CURSED_REASON
		}
		modifier = {
			add = 100
			exists = scope:target.var:banner_dynasty
			exists = scope:recipient.dynasty
			scope:recipient = scope:target.var:banner_dynasty.dynast
			desc = ARTIFACT_DYNASTY_BANNER_REASON
		}
		modifier = {
			add = -200
			OR = {
				exists = scope:target.var:banner_dynasty
				exists = scope:target.var:banner_house
			}
			exists = scope:recipient.house
			trigger_if = {
				limit = { exists = scope:target.var:banner_dynasty }
				NOT = { scope:target.var:banner_dynasty = scope:recipient.dynasty }
			}
			trigger_else = {
				NOT = { scope:target.var:banner_house = scope:recipient.house }
			}
			desc = ARTIFACT_USELESS_BANNER_REASON
		}
		# Struggle motive
		modifier = {
			desc = AI_STRUGGLE_INTENT
			scope:recipient = {
				is_independent_ruler = yes
				any_character_struggle = {
					involvement = involved
				}
			}
			add = {
				value = 0
				if = {
					limit = {
						scope:recipient = {
							any_character_struggle = {
								phase_has_catalyst = catalyst_gift_independent_ruler
							}
							has_character_flag = agenda_towards_escalation
						}
					}
					add = -100
				}
				else_if = {
					limit = {
						scope:recipient = {
							any_character_struggle = {
								phase_has_catalyst = catalyst_gift_independent_ruler
							}
						}
					}
					add = 200
				}
			}
		}
		# Unity modifiers
		evaluate_action_increasing_house_unity = {
			VALUE = 100
		}
	}
}

lopc_request_minor_titles_interaction = { # Use various incentives to get prestige and renown
	category = interaction_category_laamp
	interface_priority = 95

	desc = lopc_request_minor_titles_interaction_desc
	
	cooldown = { months = 6 }
	icon = unity_harmonious

	ai_maybe = yes
	ai_min_reply_days = 1
	ai_max_reply_days = 3
	popup_on_receive = yes
	common_interaction = yes

	is_shown = {
		scope:actor = {
			has_relation_lopc_employer = scope:recipient
			is_lopc_adventurer_courtier = yes
		}
	}
	
	is_highlighted = {
		scope:actor = {
			is_character_interaction_potentially_accepted = {
				recipient = scope:recipient
				interaction = attempt_conversion_of_local_ruler_interaction
			}
		}
	}
	
	send_option = {
		is_valid = {
			custom_tooltip = {
				text = lopc_performance_acceptable.tt
				scope:actor = { var:lopc_court_performance >= 25 } # Must be "Acceptable" or higher
			}
		}
		flag = performance
		localization = LOPC_USE_STRESS
	}
	
	send_option = {
		is_valid = {
			scope:actor = {
				gold >= scope:recipient.medium_gold_value
			}
		}
		flag = gold
		localization = LOPC_USE_GOLD
	}
	send_option = {
		is_valid = {
			scope:actor = {
				has_usable_hook = scope:recipient
			}
			NOT = {
				scope:recipient = { is_imprisoned_by = scope:actor }
			}
		}
		flag = hook
		localization = SCHEME_HOOK
	}
	send_options_exclusive = no
	should_use_extra_icon = {
		scope:actor = { has_usable_hook = scope:recipient }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"

	on_send = {
	}

	cost = {
	}

	on_accept = {
		if = {
			limit = { scope:hook = yes }
			scope:actor = { use_hook = scope:recipient }
		}
		scope:actor = {
			if = {
				limit = {
					scope:performance = yes
				}
				change_lopc_performance = { amount = -10 }
				custom_tooltip = {
					text = lopc_performance_loss.tt
				}
			}
			if = {
				limit = {
					scope:gold = yes
				}
				pay_short_term_gold = {
					target = scope:recipient
					gold = scope:recipient.medium_gold_value
				}
			}
			send_interface_toast = {
				type = event_toast_effect_neutral
				title = lopc_request_minor_titles_interaction_notification
				left_icon = scope:recipient
				right_icon = scope:target
				add_prestige = {
					value = 50
					multiply = scope:recipient.highest_held_title_tier
					#if = {
					#	limit = {
					#		scope:recipient.highest_held_title_tier >= tier_kingdom
					#	}
					#	multiply = 2
					#}
				}
				dynasty ?= {
					add_dynasty_prestige = {
						value = 20
						multiply = scope:recipient.highest_held_title_tier
						#min = 20
					}
				}
			}
		}
		scope:recipient = {
			add_opinion = {
				target = scope:actor 
				opinion = -15
				modifier = annoyed_opinion
			}
		}
	}

	on_decline = {
		scope:actor = {
			if = {
				limit = {
					scope:gold = yes
				}
				pay_short_term_gold = {
					target = scope:recipient
					gold = scope:recipient.medium_gold_value
				}
			}
			send_interface_toast = {
				type = event_toast_effect_neutral
				title = lopc_request_minor_titles_interaction_refused_notification
				left_icon = scope:recipient
				right_icon = scope:target
			}
		}
	}
	
	ai_potential = {
		always = no
	}
	
	ai_accept = {
		base = 0
		modifier = {
			desc = SCHEME_WEAK_HOOK_USED
			add = 20
			scope:hook = yes
		}
		modifier = {
			add = 30
			scope:performance = yes
			desc = USING_LOPC_PERFORMANCE
		}
		modifier = {
			add = 20
			scope:gold = yes
			desc = USING_GOLD
		}
 		modifier = {
			scope:recipient = {
				has_relation_lover = scope:actor
			}
 			add = 25
 			desc = AI_YOUR_LOVER
 		}
 		modifier = {
			scope:recipient = {
				has_relation_friend = scope:actor
			}
 			add = 25
 			desc = AI_YOUR_FRIEND
 		}
 		modifier = {
			scope:recipient = {
				is_child_of = scope:actor
			}
 			add = 50
 			desc = AI_YOUR_CHILD
 		}
		opinion_modifier = { # Opinion Factor
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 0.5
			desc = AI_OPINION_REASON
		}
		#opinion_modifier = { # Opinion Factor
		#	who = scope:actor
		#	opinion_target = scope:secondary_actor
		#	multiplier = -0.5
		#	desc = AI_OPINION_REASON
		#}
		modifier = { #Title Rank
			desc = join_court_interaction_aibehavior_titlerank_tt
			add = {
				value = 0
				if = {
					limit = {
						highest_held_title_tier = tier_empire
					}
					add = -20
				}
				else_if = {
					limit = {
						highest_held_title_tier = tier_kingdom
					}
					add = -15
				}
				else_if = {
					limit = {
						highest_held_title_tier = tier_duchy
					}
					add = -10
				}
				else_if = {
					limit = {
						highest_held_title_tier = tier_county
					}
					add = -5
				}
			}
		}
		
		modifier = { # has imprisonment reason
			desc = join_court_interaction_aibehavior_criminal_tt
			trigger = {
				scope:recipient = {
					has_imprisonment_reason = scope:actor
				}
			}
			add = -50
		}
	}
}
# Decisions don't seem to work when landless, so I've added them as interactions on your character ###
# Leave Court
lopc_true_landless_leave_court = {
	category = interaction_category_laamp
	interface_priority = 10

	desc = lopc_true_landless_leave_court_desc
	
	
	cost = {
		prestige = 50
	}
	
	cooldown = { years = 5 }
	
	icon = icon_force_to_step_down
	#icon = icon_gold
	common_interaction = yes
	greeting = positive
	notification_text = lopc_join_court_proposal

	answer_accept_key = SEND_GIFT_ACCEPT
	answer_reject_key = SEND_GIFT_REJECT
	
	auto_accept = yes
	
	send_option = {
		is_shown = { scope:recipient = { has_government = holy_order_government } }
		flag = oath
		localization = LOPC_KEEP_OATH
	}
	send_options_exclusive = no

	is_shown = {
		NOT = { scope:recipient = scope:actor }
		scope:actor = {
			has_relation_lopc_employer = scope:recipient
			#is_lopc_with_employer = yes
			is_landed = no
		}
	}

	can_send = {
	}

	on_accept = {
		scope:recipient = {
			save_scope_as = courtier_x_liege
			if = {
				limit = { 
					has_government = holy_order_government
				}
				scope:actor = { 
					stress_impact = {
						zealous = medium_stress_impact_gain
					}
					add_piety = -250
					add_character_modifier = holy_order_experience_modifier
					if = { 
						limit = { scope:oath = no }
						scope:actor = { 
							add_piety_level = -1
							remove_trait = order_member
						}
					}
				}
			}
		}
		scope:actor = {
			stress_impact = {
				loyal = medium_stress_impact_gain
				content = small_stress_impact_gain
			}
			trigger_event = { id = lopc_event.0004 }
		}
	}
	
	ai_potential = {
		always = no
	}
}
# Attend Court
lopc_true_landless_attend_court = {
	category = interaction_category_laamp
	interface_priority = 100

	desc = lopc_true_landless_attend_court_desc
	
	cooldown = { months = 2 }
	
	icon = icon_scheme_slander
	#icon = icon_gold
	common_interaction = yes
	greeting = positive
	notification_text = lopc_join_court_proposal

	answer_accept_key = SEND_GIFT_ACCEPT
	answer_reject_key = SEND_GIFT_REJECT
	
	auto_accept = yes

	is_shown = {
		NOT = { scope:recipient = scope:actor }
		scope:actor = {
			has_relation_lopc_employer = scope:recipient
			is_lopc_adventurer_courtier = yes
			is_landless_adventurer = no
			#is_lopc_with_employer = yes
			is_landed = no
		}
	}

	can_send = {
		#custom_tooltip = {
		#	text = join_court_interaction_correctlocation_tt
		#	OR = {
		#		scope:actor = {
		#			location.province_owner = scope:recipient
		#			location = location.province_owner.capital_province
		#		}
		#		scope:actor = { any_held_title = { is_noble_family_title = yes } }
		#	}
		#}
		scope:actor = { 
			OR = {
				is_travelling = no 
				custom_tooltip = {
					text = join_court_interaction_correctlocation_tt
					scope:actor = {
						location.province_owner = scope:recipient
						location = location.province_owner.capital_province
					}
				}
			}
		}
	}

	on_accept = {
		scope:actor = {
			if = {
				limit = { NOT = { location = scope:recipient.capital_province } } 
					
				start_travel_plan = {
					destination = scope:recipient.capital_province
					on_arrival_event = lopc_noble_family_event.0001
				}
			}
			else = {
				trigger_event = { id = lopc_event.2100 }
			}
		}
	}
	
	ai_potential = {
		always = no
	}
}
# Join Groups - should ultimately allow joining mercs, holy orders, and adventurers ###
# Join Holy Order - Add member of holy order modifier. Add order member trait. 
lopc_true_landless_join_group = {
	category = interaction_category_laamp
	interface_priority = 100

	desc = lopc_true_landless_join_group_desc
	
	
	cost = {
		#prestige = 50
	}
	
	cooldown = { months = 2 }
	
	icon = icon_scheme_slander
	#icon = icon_gold
	common_interaction = yes
	greeting = positive
	notification_text = lopc_join_court_proposal

	answer_accept_key = SEND_GIFT_ACCEPT
	answer_reject_key = SEND_GIFT_REJECT
	
	auto_accept = no

	is_shown = {
		NOT = { scope:recipient = scope:actor }
		scope:actor = {
			is_lopc_adventurer_courtier = no
			is_lopc_adventurer_special_courtier = no
			is_landed = no
			is_landless_adventurer = no
		}
		custom_tooltip = {
			scope:recipient = {
				is_ruler = yes
				OR = {
					has_government = mercenary_government 
					has_government = holy_order_government 
					has_government = landless_adventurer_government  
				}
			}
			text = join_group_interaction_correctlocation_tt
		}
	}

	can_send = {
		custom_tooltip = {
			scope:actor = {
				location = scope:recipient.capital_province
			}
			text = join_court_interaction_correctlocation_tt
		}
		custom_tooltip = {
			scope:recipient = {
				OR = {
					NOT = { has_government = holy_order_government }
					has_faith = scope:actor.faith
				}
			}
			text = join_court_interaction_validorder_tt
		}
	}

	on_accept = {
		scope:recipient = { 
			add_courtier = scope:actor
		}
		hidden_effect = { 
			scope:actor = {
				return_to_court = yes 				
				set_relation_lopc_employer  = { 
					custom_description = set_relation_lopc_employer_desc
					target = scope:recipient 
				}
				set_variable = {
					name = lopc_court_performance
					value = 0
				}
				change_lopc_performance = { amount = 5 }
			} 
		}
		if = {
			limit = { scope:recipient = { has_government = mercenary_government } }
			scope:actor = { 
				add_character_modifier = lopc_merc
		
				trigger_event = {
					id = lopc_event.2402
					months = { 1 3 }
				}
			}
		}
		else_if = {
			limit = { scope:recipient = { has_government = holy_order_government } }
			scope:actor = { 
				add_character_modifier = lopc_holy_order
				add_trait = order_member
		
				trigger_event = {
					id = lopc_event.2401
					months = { 3 6 }
				}
			}
		}
		else_if = {
			limit = { scope:recipient = { has_government = landless_adventurer_government } }
			scope:actor = { 
				add_character_modifier = lopc_adventurer
		
				trigger_event = {
					id = lopc_event.2403
					months = { 3 6 }
				}
			}
		}
	}
	
	ai_accept = {
		base = 0
 		modifier = {
			scope:recipient = {
				has_relation_lover = scope:actor
			}
 			add = 25
 			desc = AI_YOUR_LOVER
 		}
 		modifier = {
			scope:recipient = {
				has_relation_friend = scope:actor
			}
 			add = 25
 			desc = AI_YOUR_FRIEND
 		}
 		modifier = {
			scope:recipient = {
				is_child_of = scope:actor
			}
 			add = 50
 			desc = AI_YOUR_CHILD
 		}
		opinion_modifier = { # Opinion Factor
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 1
			desc = AI_OPINION_REASON
		}
		#opinion_modifier = { # Opinion Factor
		#	who = scope:actor
		#	opinion_target = scope:secondary_actor
		#	multiplier = -1
		#	desc = AI_OPINION_REASON
		#}
		
		modifier = { # has imprisonment reason
			desc = join_court_interaction_aibehavior_criminal_tt
			trigger = {
				scope:recipient = {
					has_imprisonment_reason = scope:actor
				}
			}
			add = -40
		}

		# Already a courtier? (can happen if you join court via truly landless)
		modifier = {
			scope:actor = {
				is_courtier_of = scope:recipient
			}
			add = {
				value = 20
			}
			desc = join_court_interaction_aibehavior_courtier_tt
		}
	}
}

# Visit Personal Quarters
#lopc_true_landless_attend_special_court = {
#	category = interaction_category_laamp
#	interface_priority = 100
#
#	desc = lopc_true_landless_attend_court_desc
#	
#	
#	cost = {
#	}
#	
#	cooldown = { months = 2 }
#	
#	icon = holy_order
#	#icon = icon_gold
#	common_interaction = yes
#	greeting = positive
#	notification_text = lopc_join_court_proposal
#
#	answer_accept_key = SEND_GIFT_ACCEPT
#	answer_reject_key = SEND_GIFT_REJECT
#	
#	auto_accept = yes
#
#	is_shown = {
#		NOT = { scope:recipient = scope:actor }
#		scope:actor = {
#			has_character_modifier = lopc_holy_order
#			has_relation_lopc_employer = scope:recipient
#			#is_lopc_with_employer = yes
#			is_landed = no
#			is_imprisoned = no
#		}
#	}
#
#	can_send = {
#		custom_tooltip = {
#			scope:actor = {
#				#location.province_owner = scope:recipient
#				location = scope:recipient.capital_province
#			}
#			text = join_court_interaction_correctlocation_tt
#		}
#	}
#
#	on_accept = {
#		scope:recipient = {
#			save_scope_as = courtier_x_liege
#		} 
#		scope:actor = {
#			trigger_event = lopc_event.2102
#		}
#	}
#	
#	ai_potential = {
#		always = no
#	}
#}
# Attend Camp (for mercs/adventurers)
lopc_true_landless_attend_camp = {
	category = interaction_category_laamp
	interface_priority = 100

	desc = lopc_true_landless_attend_court_desc
	
	cooldown = { months = 2 }
	
	icon = request_mercenary
	#icon = icon_gold
	common_interaction = yes
	greeting = positive
	notification_text = lopc_join_court_proposal

	answer_accept_key = SEND_GIFT_ACCEPT
	answer_reject_key = SEND_GIFT_REJECT
	
	auto_accept = yes

	is_shown = {
		NOT = { scope:recipient = scope:actor }
		scope:actor = {
			is_imprisoned = no
			has_relation_lopc_employer = scope:recipient
			OR = {
				has_character_modifier = lopc_adventurer
				has_character_modifier = lopc_merc
				exists = root.knight_army
			}
			is_landless_adventurer = no
		}
	}

	can_send = {
	}

	on_accept = {
		scope:actor = {
			trigger_event = { id = lopc_event.2420 }
		}
	}
	
	ai_potential = {
		always = no
	}
}
# Attend Holy Order (for order members)
lopc_true_landless_attend_order = {
	category = interaction_category_laamp
	interface_priority = 100

	desc = lopc_true_landless_attend_court_desc
	
	cooldown = { months = 2 }
	
	icon = holy_order
	#icon = icon_gold
	common_interaction = yes
	greeting = positive
	notification_text = lopc_join_court_proposal

	answer_accept_key = SEND_GIFT_ACCEPT
	answer_reject_key = SEND_GIFT_REJECT
	
	auto_accept = yes

	is_shown = {
		NOT = { scope:recipient = scope:actor }
		scope:actor = {
			has_relation_lopc_employer = scope:recipient
			has_character_modifier = lopc_holy_order
			is_landless_adventurer = no
			is_imprisoned = no
		}
	}

	can_send = {
	}

	on_accept = {
		scope:actor = {
			trigger_event = { id = lopc_event.2102 }
		}
	}
	
	ai_potential = {
		always = no
	}
}
# Overwritten movement from truly landless, just stops you joining another court if employed
#travel around the map to look for new contracts
visit_court_interaction = {
	category = interaction_category_laamp
	
	interface_priority = 100
	common_interaction = yes
	use_diplomatic_range = yes

	icon = icon_contract_escort #Check
	
	desc = visit_court_interaction_desc
	cost = {
		
	}
	is_shown = {
		scope:actor = {
			OR = {
				has_relation_lopc_employer = scope:recipient
				AND = {
					is_lopc_adventurer_courtier = no
					is_lopc_adventurer_special_courtier = no
				}
			}
			is_landed = no
			is_imprisoned = no
			is_ruler = no
			#is_ai = no
			NOR = {
				this = scope:recipient
				location = scope:recipient.location
				#is_courtier_of = scope:recipient
				#is_foreign_court_or_pool_guest_of = scope:recipient
			}
			can_leave_court_trigger = yes
		}
		scope:recipient = { 
			highest_held_title_tier >= tier_barony
			exists = capital_province 
			is_landless_adventurer = no
		}
	}

	is_valid_showing_failures_only = {
		scope:recipient = {
			is_travelling = no
			is_imprisoned = no
			# They can't be in isolation - test it
			NOT = {
				has_character_modifier = isolating_modifier
			}
			capital_county = { 
				NOT = {
					has_county_modifier = isolate_capital_decision_modifier 
				}
			}
		}
		custom_tooltip = {
			text = quit_court_reason
			scope:recipient = {
				NOR = {
					has_opinion_modifier = {
						target = scope:actor
						modifier = quit_court_opinion
					}
					has_opinion_modifier = {
						target = scope:actor
						modifier = quit_court_important_courtier_opinion
					}
				}
			}
		}
		# They can't go to places if they were dismissed
		#custom_tooltip = {
		#	text = the_wake_1
		#	NOT = {
		#		is_laamp_exiled_from_province_trigger = {
		#			PROVINCE = scope:recipient.capital_province
		#			LAAMP = scope:actor
		#		}
		#	}
		#}
	}

	on_accept = {
		scope:recipient.capital_province = {
			save_scope_as = relocation_destination
		}
		scope:actor.location = {
			save_temporary_scope_value_as = {
				name = distance
				value = "squared_distance(scope:relocation_destination)"
			}
		}
		show_as_tooltip = {
			scope:actor = {
				if = {
					limit = {
						exists = host
					}
					host = {
						remove_courtier_or_guest = scope:actor
					}
					if = {
						limit = {
							is_courtier_of = host
						}
						if = {
							limit = {
								OR = {
									is_knight_of = court_owner
									is_councillor_of = court_owner
									any_court_position_employer = { this = court_owner }
								}
							}
							add_prestige = minor_prestige_loss
							court_owner = {
								add_opinion = {
									target = scope:actor
									modifier = quit_court_important_courtier_opinion
								}
							}
						}
						else = {
							court_owner = {
								add_opinion = {
									target = scope:actor
									modifier = quit_court_opinion
								}
							}
						}
					}
				}
			}
		}
		scope:actor = {
			remove_long_term_gold = {
				value = scope:distance
				divide = 4000
				min = 2
				max = 75
				#add = scope:distance
				#multiply = -1
			}
			# Check
			#show_as_tooltip = {
			#	domicile = {
			#		move_domicile = scope:relocation_destination
			#	}
			#}
			start_travel_plan = {
				destination = scope:relocation_destination
				on_start_on_action = on_travel_court_guest_start # Check
				on_arrival_on_action = on_travel_court_guest_end # Check
				on_travel_planner_cancel_on_action = petition_liege_travel_planner_exit
				on_arrival_destinations = last
				return_trip = no # One way
			}
		}
	}

	auto_accept = yes
	
	ai_potential = {
		always = no
	}
}

# Establish adventurer camp
lopc_become_laamp = {
	category = interaction_category_laamp
	desc = make_laamp_desc
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	icon = request_invasion_sponsorship_interaction

	interface_priority = 75

	is_shown = {
		scope:actor = scope:recipient
		scope:actor = {
			#OR = {
			#	liege = { highest_held_title_tier >= tier_kingdom }
			#	is_lopc_adventurer_courtier = no
			#}
			#is_lopc_adventurer_special_courtier = no
			is_landed = no
			is_landless_adventurer = no
			is_imprisoned = no
			NOT = { has_character_modifier = lopc_holy_order }
		}
	}
	is_valid = {
		scope:actor = {
			prestige_level >= 2
		}
	}
	cost = {
		gold = 200
	}
	auto_accept = yes

	ai_will_do = 0

	on_accept = {
		scope:recipient = {
			create_landless_adventurer_title_effect = {
				REASON = flag:voluntary
				FLAVOR_CHAR = scope:recipient
			}
			lopc_get_independence = yes
			if = {
				limit = {
					OR = {
						is_lopc_adventurer_courtier = yes
						is_lopc_adventurer_special_courtier = yes
					}
				}
				trigger_event = { id = lopc_event.0004 }
			}
			#hidden_effect = {
			#	random_relation = {
			#		type = lopc_employer
			#		save_scope_as = courtier_x_liege
			#	}
			#	create_title_and_vassal_change = {
			#		type = swear_fealty
			#		save_scope_as = change
			#	}
			#	change_liege = {
			#		liege = scope:courtier_x_liege
			#		change = scope:change
			#	}
			#	
			#	resolve_title_and_vassal_change = scope:change
			#}
		}
	}
	
	ai_potential = {
		always = no
	}
}

# Search for opportunities
lopc_search_opportunities = {
	category = interaction_category_laamp
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	icon = icon_scheme_slander

	interface_priority = 75
	
	cooldown = { years = 1 }
	cooldown_against_recipient = { years = 1 }

	is_shown = {
		scope:actor = scope:recipient
		scope:actor = {
			is_landed = no
			is_landless_adventurer = no
			is_imprisoned = no
			#NOT = { has_character_modifier = lopc_holy_order }
		}
	}
	is_valid = {
		scope:actor = {
			location = { has_holding = yes } 
		}
	}
	cost = {
	}
	auto_accept = yes

	ai_will_do = 0

	on_accept = {
		scope:recipient = {
			trigger_event = { id = lopc_event.2430 }
		}
	}
	
	ai_potential = {
		always = no
	}
}

# Home management
lopc_home_management = {
	category = interaction_category_laamp
	desc = lopc_home_management_desc
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	icon = owner_in_debt

	interface_priority = 74
	
	cooldown = { months = 6 }
	cooldown_against_recipient = { months = 6 }

	is_shown = {
		scope:actor = scope:recipient
		scope:actor = {
			is_imprisoned = no
			#NOT = { has_character_modifier = lopc_holy_order }
			exists = var:lopc_home_location
		}
	}
	is_valid = {
	}
	
	auto_accept = yes

	ai_will_do = 0
	
	send_options_exclusive = yes
	
	send_option = { # Relax
		is_valid = {
			custom_description = {
				text = lopc_home_management.invalid.tt
				scope:actor = {
					location = var:lopc_home_location 
				}
			}
		}
		flag = relax
		localization = LOPC_HOUSE_RELAX
	}
	
	send_option = { # Rent
		is_shown = { scope:actor = { NOT = { has_character_flag = flag:lopc_owns_business } } }
		flag = rent
		localization = LOPC_HOUSE_RENT
	}
	
	send_option = { # Start a business
		is_shown = { scope:actor = { NOT = { has_character_flag = flag:lopc_owns_business } } }
		flag = start_business
		localization = LOPC_HOUSE_START_BUSINESS
	}
	
	send_option = { # Manage Business
		is_shown = { scope:actor = { has_character_flag = flag:lopc_owns_business } }
		flag = manage
		localization = LOPC_HOUSE_MANAGE
	}
	
	send_option = { # Expand
		is_valid = { 
			scope:actor = { 
				NOT = { has_character_modifier = lopc_owns_home_4 }
				gold >= {
					value = 3
					multiply = location.county.development_level
					if = {
						limit = { has_character_modifier = lopc_owns_home_2 }
						multiply = 2
					}
					else_if = {
						limit = { has_character_modifier = lopc_owns_home_3 }
						multiply = 3
					}
				}
			}
		}
		flag = expand
		localization = LOPC_HOUSE_EXPAND
	}
	
	send_option = { # Sell
		flag = sell
		localization = LOPC_HOUSE_SELL
	}

	on_accept = {
		scope:actor = {
			if = {
				limit = {
					scope:relax = yes
				}
				add_stress = {
					value = -15
					if = {
						limit = { has_character_modifier = lopc_owns_home_2 }
						multiply = 2
					}
					else_if = {
						limit = { has_character_modifier = lopc_owns_home_3 }
						multiply = 3
					}
					else_if = {
						limit = { has_character_modifier = lopc_owns_home_4 }
						multiply = 4
					}
				}
			}
			else_if = {
				limit = {
					scope:rent = yes
				}
				add_gold = {
					value = location.county.development_level
					divide = 4
					if = {
						limit = { has_character_modifier = lopc_owns_home_2 }
						multiply = 1.5
					}
					else_if = {
						limit = { has_character_modifier = lopc_owns_home_3 }
						multiply = 2
					}
					else_if = {
						limit = { has_character_modifier = lopc_owns_home_4 }
						multiply = 2.5
					}
				}
			}
			else_if = {
				limit = {
					scope:start_business = yes
				}
				custom_description = {
					text = lopc_home_management.startbusiness.tt
				}
				trigger_event = lopc_event.2436 
			}
			else_if = {
				limit = {
					scope:manage = yes
				}
				#add_gold = lopc_business_value
				add_character_modifier = {
					modifier = lopc_managed_business
					years = 1
				}
				lopc_refresh_business = yes
			}
			else_if = {
				limit = {
					scope:expand = yes
				}
				remove_short_term_gold = {
					value = 2
					multiply = location.county.development_level
					if = {
						limit = { has_character_modifier = lopc_owns_home_2 }
						multiply = 2
					}
					else_if = {
						limit = { has_character_modifier = lopc_owns_home_3 }
						multiply = 3
					}
				}
				if = {
					limit = { has_character_modifier = lopc_owns_home_1 }
					remove_character_modifier = lopc_owns_home_1
					add_character_modifier = lopc_owns_home_2
				}
				else_if = {
					limit = { has_character_modifier = lopc_owns_home_2 }
					remove_character_modifier = lopc_owns_home_2
					add_character_modifier = lopc_owns_home_3
				}
				else = {
					remove_character_modifier = lopc_owns_home_3
					add_character_modifier = lopc_owns_home_4
				}
			}
			else_if = {
				limit = {
					scope:sell = yes
				}
				remove_variable = lopc_home_location
				remove_character_flag = flag:lopc_owns_business
				hidden_effect = {				
					remove_character_modifier = lopc_owns_home_1
					remove_character_modifier = lopc_owns_home_2
					remove_character_modifier = lopc_owns_home_3
					remove_character_modifier = lopc_owns_home_4
					remove_character_modifier = lopc_business_inn_mixed
					remove_character_modifier = lopc_business_shop_mixed
					remove_character_modifier = lopc_business_farm_mixed
					remove_character_modifier = lopc_business_shipping_mixed
					remove_character_modifier = lopc_business_trade_post_mixed
				}
				add_gold = {
					value = 1.5
					multiply = var:lopc_home_location.county.development_level
					if = {
						limit = { has_character_modifier = lopc_owns_home_2 }
						multiply = 2
					}
					else_if = {
						limit = { has_character_modifier = lopc_owns_home_3 }
						multiply = 3
					}
					else_if = {
						limit = { has_character_modifier = lopc_owns_home_4 }
						multiply = 4
					}
				}
			}
		}
	}
	
	ai_potential = {
		always = no
	}
}

### Spending Performance ###
# Weak hook on liege
lopc_performance_liege_hook = {
	category = interaction_category_laamp
	#desc = make_laamp_desc
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	icon = secret

	interface_priority = 95
	
	is_shown = {
		NOT = { scope:recipient = scope:actor }
		scope:actor = {
			has_relation_lopc_employer = scope:recipient
			#is_lopc_with_employer = yes
			is_landed = no
			has_variable = lopc_court_performance
			can_add_hook = {
				target = scope:recipient
				type = manipulation_hook
			}
		}
	}

	can_send = {
		custom_tooltip = {
			text = lopc_performance_good.tt
			scope:actor = { var:lopc_court_performance >= 50 } # Must be "Good" or higher
		}
	}
	auto_accept = yes

	ai_will_do = 0

	on_accept = {
		scope:actor = {			
			add_hook = {
				target = scope:recipient
				type = manipulation_hook
			}
			change_lopc_performance = { amount = -49 }
			custom_tooltip = lopc_performance_loss.tt # Your court performance will decrease.
		}
	}
	
	ai_potential = {
		always = no
	}
}
#get hook on courtier at the same court
lopc_performance_courtier_hook = {
	category = interaction_category_laamp
	#desc = make_laamp_desc
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	icon = secret

	interface_priority = 95
	is_shown = {
		NOT = { scope:recipient = scope:actor }
		#exists = scope:recipient.liege
		NOT = { scope:recipient = scope:recipient.top_liege } 
		scope:actor = {
			has_relation_lopc_employer = scope:recipient.liege
			#is_lopc_with_employer = yes
			is_landed = no
			has_variable = lopc_court_performance
			can_add_hook = {
				target = scope:recipient
				type = manipulation_hook
			}
		}
	}

	can_send = {
		custom_tooltip = {
			text = lopc_performance_acceptable.tt
			scope:actor = { var:lopc_court_performance >= 25 } # Must be "Acceptable" or higher
		}
		scope:recipient = { is_adult = yes }
	}
	auto_accept = yes

	ai_will_do = 0
	
	on_accept = {
		scope:actor = {			
			add_hook = {
				target = scope:recipient
				type = manipulation_hook
			}
			change_lopc_performance = { amount = -24 }
			custom_tooltip = lopc_performance_loss.tt # Your court performance will decrease.
		}
	}
	
	ai_potential = {
		always = no
	}
}
# leverage favour to add slot to schemes
lopc_performance_buff_schemes = {
	category = interaction_category_laamp
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	icon = scheme_assassination
	send_options_exclusive = yes

	interface_priority = 95
	is_shown = {
		NOT = { scope:recipient = scope:actor }
		#exists = scope:recipient.liege
		scope:actor = {
			has_relation_lopc_employer = scope:recipient
			#is_lopc_with_employer = yes
			is_landed = no
			has_variable = lopc_court_performance
		}
	}

	can_send = {
		custom_tooltip = {
			text = lopc_performance_acceptable.tt
			scope:actor = { var:lopc_court_performance >= 25 } # Must be "Acceptable" or higher
		}
		scope:recipient = { is_adult = yes }
		custom_tooltip = {
			text = lopc_performance_buff_schemes_acceptable.tt
			scope:actor = {
				any_scheme = {
					count >= 1
					scheme_target_character = {
						OR = {
							is_courtier_of  = scope:recipient 
							this = scope:recipient
						}
					}
					any_scheme_agent_slot = {
						count >= 1
					}
				}
			}
		}
	}
	auto_accept = yes

	ai_will_do = 0
	
	ai_potential = {
		always = no
	}
	
	# Give me an agent slot that gives max success chance.
	send_option = { flag = debug_buff_schemes_give_agent_success_chance_max }
	# Give me an agent slot that gives speed.
	send_option = { flag = debug_buff_schemes_give_agent_speed }
	# Give me an agent slot that gives secrecy.
	send_option = { flag = debug_buff_schemes_give_agent_secrecy }

	on_accept = {
		custom_tooltip = lopc_performance_buff_schemes.tt.application_warning
		scope:actor = {
			custom_tooltip = lopc_performance_loss.tt # Your court performance will decrease.
			change_lopc_performance = { amount = -10 }
			random_scheme = {
				limit = { 
					scheme_target_character = {
						OR = {
							is_courtier_of  = scope:recipient 
							this = scope:recipient
						}
					}
					any_scheme_agent_slot = {
						count >= 1
					}
				}
				if = {
					limit = { always = scope:debug_buff_schemes_give_agent_success_chance_max }
					add_agent_slot = lopc_agent_success_chance_max
					#random_scheme_agent_slot = {
					#	limit = {
					#		is_agent_slot_type = lopc_agent_success_chance_max
					#		is_filled = no
					#	}
					#	save_scope_as = slot
					#}
				}
				if = {
					limit = { always = scope:debug_buff_schemes_give_agent_speed }
					add_agent_slot = lopc_agent_speed
					#random_scheme_agent_slot = {
					#	limit = {
					#		is_agent_slot_type = lopc_agent_speed
					#		is_filled = no
					#	}
					#	save_scope_as = slot
					#}
				}
				if = {
					limit = { always = scope:debug_buff_schemes_give_agent_secrecy }
					add_agent_slot = lopc_agent_secrecy
					#random_scheme_agent_slot = {
					#	limit = {
					#		is_agent_slot_type = lopc_agent_secrecy
					#		is_filled = no
					#	}
					#	save_scope_as = slot
					#}
				}
				#scope:recipient = { 
				#	random_courtier = { 
				#		limit = { NOT = { this = scheme_target_character } }
				#		add_to_agent_slot = scope:slot 
				#	} 
				#}
			}
		}
	}
}
# invite relation to your employer's court
lopc_invite_liege_court = {
	category = interaction_category_laamp
	#desc = make_laamp_desc
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	icon = guest

	interface_priority = 1
	is_shown = {
		NOT = { scope:recipient = scope:actor }
		NOT = { scope:recipient.liege = scope:actor.liege}
		scope:actor = {
			has_relation_lopc_employer = scope:actor.liege
			#is_lopc_with_employer = yes
			is_landless_adventurer = no
			OR = {				
				has_relation_friend = scope:recipient
				has_relation_best_friend = scope:recipient
				has_relation_lover = scope:recipient
				has_relation_soulmate = scope:recipient
				primary_spouse = scope:recipient
				any_close_or_extended_family_member = {
					this = scope:recipient
				}
			}
		}
	}

	can_send = {
		#scope:actor = { var:lopc_court_performance >= 50 } # Must be "Acceptable" or higher
		scope:recipient = {
			is_landed = no
			is_imprisoned = no
		}
	}
	auto_accept = no

	ai_will_do = 0

	on_accept = {
		scope:actor.liege = { add_courtier = scope:recipient }
		scope:actor = {
			send_interface_toast = {
				type = event_toast_effect_neutral
				title = invite_to_court_interaction_notification
				left_icon = scope:recipient
			}
		}
		scope:recipient = {
			hidden_effect = { return_to_court = yes }
		}
	}
	
	ai_potential = {
		always = no
	}
	
	ai_accept = {
		base = -25
 		modifier = {
			scope:recipient = {
				primary_spouse = scope:actor
			}
 			add = 25
 			desc = AI_YOUR_SPOUSE
 		}
 		modifier = {
			scope:recipient = {
				has_relation_lover = scope:actor
			}
 			add = 25
 			desc = AI_YOUR_LOVER
 		}
 		modifier = {
			scope:recipient = {
				has_relation_friend = scope:actor
			}
 			add = 25
 			desc = AI_YOUR_FRIEND
 		}
 		modifier = {
			scope:recipient = {
				is_child_of = scope:actor
			}
 			add = 50
 			desc = AI_YOUR_CHILD
 		}
		opinion_modifier = { # Opinion Factor
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 1
			desc = AI_OPINION_REASON
		}
		#opinion_modifier = { # Opinion Factor
		#	who = scope:actor
		#	opinion_target = scope:secondary_actor
		#	multiplier = -1
		#	desc = AI_OPINION_REASON
		#}
		
		modifier = { # has imprisonment reason
			desc = join_court_interaction_aibehavior_criminal_tt
			trigger = {
				scope:recipient = {
					has_imprisonment_reason = scope:actor
				}
			}
			add = -40
		}
	}
}

# Request to join current activity at location
lopc_ask_to_join_activity_interaction = {
	category = interaction_category_laamp
	greeting = positive
	notification_text = lopc_ask_to_join_activity_interaction_flavor
	reply_item_key = invite_to_activity_reply_item_key
	icon = activity_feast
	interface_priority = 80
	common_interaction = yes
	desc = lopc_ask_to_join_activity_interaction_desc

	ai_maybe = yes
	can_send_despite_rejection = yes
	
	is_highlighted = {
		always = yes
	}

	is_shown = {
		scope:actor = {
			is_landed = no
			is_landless_adventurer = no
			is_imprisoned = no
		}
		exists = scope:recipient.involved_activity
		scope:recipient = scope:recipient.involved_activity.activity_host
		scope:recipient.involved_activity = {
			is_current_phase_active = no
			OR = {
				has_activity_type = activity_tournament
				has_activity_type = activity_wedding
				has_activity_type = activity_feast
				has_activity_type = activity_hunt
				has_activity_type = activity_chariot_race
			}
		}
		scope:actor = { can_join_activity = scope:recipient.involved_activity }
	}

	on_send = {
		scope:actor = {
			invite_to_activity = scope:recipient.involved_activity
		}
	}
	
	on_accept = {
		# Acceptance handled by the activity system itself
		scope:actor = {
			send_interface_message = {
				type = event_activity_good_with_text
				title = invite_to_activity_accepted
				desc = invite_to_activity_accepted_desc
				left_icon = scope:actor
				right_icon = scope:recipient
				scope:actor = {
					accept_activity_invite = scope:recipient.involved_activity
				}
			}
		}
	}

	on_decline = {
		# Acceptance handled by the activity system itself
		scope:actor = {
			send_interface_message = {
				type = event_activity_bad_with_text
				title = invite_to_activity_refused
				desc = invite_to_activity_refused_desc
				left_icon = scope:actor
				right_icon = scope:recipient
				scope:actor = {
					decline_activity_invite = scope:recipient.involved_activity
				}
			}
		}
	}

	ai_accept = {
		base = -5
		opinion_modifier = { # Opinion Factor
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 1
			desc = AI_OPINION_REASON
		}
		
		modifier = { # has imprisonment reason
			desc = join_court_interaction_aibehavior_criminal_tt
			trigger = {
				scope:recipient = {
					has_imprisonment_reason = scope:actor
				}
			}
			add = -40
		}
	}
}

#declare me vizier decision
# normal requirements are unlanded, same religion, and liege applicable for vizier (ie is clan)
lopc_declare_me_vizier = {
	category = interaction_category_diarch
	icon = icon_declare_me_regent
	should_use_extra_icon = {
		scope:actor = { has_usable_hook = scope:recipient }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"
	desc = lopc_declare_me_vizier_desc
	interface_priority = 20

	is_shown = {
		scope:actor = {
			is_courtier_of = scope:recipient
		}
		scope:recipient = {
			# Must be able to retain a vizier.
			government_has_flag = may_appoint_viziers
			# Plus obscure the interaction if we've already got one, else it's annoyingly redundant.
			NOT = { has_diarchy_active_parameter = diarchy_is_vizierate }
		}
	}

	can_send = {
		# sender must have same faith
		scope:actor = {
			has_faith = scope:recipient.faith
		}
		# You can't already be in a diarchy of any kind.
		scope:recipient = {
			has_active_diarchy = no
		}
		# Must be of a decent tier.
		custom_tooltip = {
			text = appoint_vizier_interaction.tt.duchy_or_more
			scope:recipient.highest_held_title_tier >= tier_duchy
		}
		# Plus the usuals.
		scope:recipient = { is_available_at_peace = yes }
		# And can't have put the realm into turmoil over this recently.
		scope:recipient = {
			NOT = { has_character_modifier = civil_service_in_chaos_modifier }
		}
	}

	cost = { prestige = 500 }
	
	send_options_exclusive = no
	
	send_option = {
		is_valid = {
			custom_tooltip = {
				text = lopc_performance_acceptable.tt
				scope:actor = { var:lopc_court_performance >= 25 } # Must be "Acceptable" or higher
			}
		}
		flag = performance
		localization = LOPC_USE_STRESS
	}
	
	send_option = {
		is_valid = {
			scope:actor = {
				gold >= scope:recipient.medium_gold_value
			}
		}
		flag = gold
		localization = LOPC_USE_GOLD
	}
	send_option = {
		is_valid = {
			scope:actor = {
				gold >= scope:recipient.medium_gold_value
			}
		}
		flag = more_gold
		localization = LOPC_USE_MORE_GOLD
	}
	send_option = {
		is_valid = {
			scope:actor = {
				has_usable_hook = scope:recipient
			}
			NOT = {
				scope:recipient = { is_imprisoned_by = scope:actor }
			}
		}
		flag = hook
		localization = SCHEME_HOOK
	}
	on_accept = {
		scope:recipient = {
			try_start_diarchy = vizierate
			set_diarch = scope:actor
			
			designated_diarch ?= {
				if = {
					limit = {
						NOT = { this = scope:actor }
					}
					add_opinion = {
						target = scope:actor
						modifier = appointed_vizier_over_designated_regent_opinion
						opinion = -40
					}
				}
			}
			set_variable = {
				name = my_vizier
				value = scope:recipient
			}
			# Finally, let's do some stress.
			stress_impact = {
				trusting = massive_stress_impact_loss
				lazy = major_stress_impact_loss
				paranoid = minor_stress_impact_gain
				diligent = minor_stress_impact_gain
			}
		}
		scope:actor = {
			if = {
				limit = { scope:hook = yes }
				scope:actor = { use_hook = scope:recipient }
			}
			if = {
				limit = {
					scope:performance = yes
				}
				change_lopc_performance = { amount = -10 }
				custom_tooltip = {
					text = lopc_performance_loss.tt
				}
			}
			if = {
				limit = {
					scope:gold = yes
				}
				pay_short_term_gold = {
					target = scope:recipient
					gold = scope:recipient.medium_gold_value
				}
			}
			if = {
				limit = {
					scope:more_gold = yes
				}
				pay_short_term_gold = {
					target = scope:recipient
					gold = scope:recipient.medium_gold_value
				}
			}
			add_opinion = {
				target = scope:recipient
				modifier = compliment_opinion
				opinion = 30
			}
			stress_impact = {
				ambitious = minor_stress_impact_loss
				arrogant = minor_stress_impact_loss
				lazy = major_stress_impact_gain
			}
		}
		
	}
	
	ai_potential = {
		always = no
	}
	
	ai_accept = {
		base = -100

		# Realm.
		## Weight up for kings.
		modifier = {
			add = 10
			highest_held_title_tier = tier_kingdom
		}
		## Weight up for emperors.
		modifier = {
			add = 15
			highest_held_title_tier >= tier_empire
		}
		## Add realm size directly.
		modifier = {
			add = sub_realm_size
			custom_description = {
				text = lopc_vizier_realm_size_reason
				is_landed = yes
			}
		}

		# Traits.
		## +++ Lazy.
		modifier = {
			add = 10
			has_trait = lazy
		}
		## +++ Greedy.
		modifier = {
			add = 10
			has_trait = greedy
		}
		## ++ Humble.
		modifier = {
			add = 5
			has_trait = humble
		}
		## ++ Content.
		modifier = {
			add = 5
			has_trait = content
		}
		## ++ Impatient.
		modifier = {
			add = 5
			has_trait = impatient
		}
		## + Content.
		modifier = {
			add = 5
			has_trait = content
		}
		## + Shy.
		modifier = {
			add = 5
			has_trait = shy
		}
		## - Gregarious.
		modifier = {
			add = -5
			has_trait = gregarious
		}
		## -- Diligent.
		modifier = {
			add = -10
			has_trait = diligent
		}
		## --- Arrogant.
		modifier = {
			add = -10
			has_trait = arrogant
		}
		## --- Ambitious.
		modifier = {
			add = -10
			has_trait = ambitious
		}
		modifier = { # has imprisonment reason
			add = -40
			trigger = {
				scope:recipient = {
					has_imprisonment_reason = scope:actor
				}
			}
		}
		
		opinion_modifier = { # Opinion Factor
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 0.3
			max = 30
			desc = AI_OPINION_REASON
		}
		modifier = {
			add = 25
			scope:performance = yes
			desc = USING_LOPC_PERFORMANCE
		}
		modifier = {
			add = 20
			scope:gold = yes
			desc = USING_GOLD
		}
		modifier = {
			add = 20
			scope:more_gold = yes
			desc = USING_GOLD
		}
		modifier = {
			add = 30
			scope:hook = yes
			desc = USING_HOOK
		}
	}
}
# Landless Regent Coup
lopc_attempt_landless_coup = {
	category = interaction_category_diarch
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes
	diarch_interaction = yes
	icon = icon_scheme_claim_throne

	interface_priority = 51
	
	cooldown = { years = 1 }
	#cooldown_against_recipient = { years = 1 }

	is_shown = {
		OR = {
			scope:recipient = scope:actor.liege
			scope:recipient = scope:actor
		}
		scope:actor = {
			is_landed = no
			is_landless_adventurer = no
			is_imprisoned = no
						
			OR = {
				AND = {
					exists = liege
					is_diarch_of_target = liege
				}
				is_designated_diarch = yes
			}
		
		}
	}
	is_valid = {
		scope:actor = {
			diarch_coup_attempt_is_valid_trigger = { LIEGE = scope:actor.liege }
			prestige_level >= high_prestige_level
		}
	}
	
	
	send_option = {
		flag = coup_diplomacy
		localization = diarch_attempt_to_overthrow_liege.tt.coup_diplomacy_desc
		icon = "gfx/interface/icons/icon_diplomacy.dds"
	}
	
	send_option = {
		flag = coup_intrigue
		localization = diarch_attempt_to_overthrow_liege.tt.coup_intrigue_desc
		icon = "gfx/interface/icons/icon_intrigue.dds"
	}
	
	send_option = {
		flag = coup_prowess
		localization = diarch_attempt_to_overthrow_liege.tt.coup_prowess_desc
		icon = "gfx/interface/icons/icon_prowess.dds"
	}
	
	cost = {
	}
	auto_accept = yes

	ai_will_do = 0

	on_accept = {
		scope:actor = {
			# Save some scopes for loc.
			save_scope_as = usurper
			liege = { save_scope_as = liege }
			# Fire the misc assorted effects we want here & for the AI path.
			diarch_coup_preamble_effects_effect = yes
			# Right, so how does this work?
			custom_tooltip = diarch_attempt_to_overthrow_liege.tt.coup_types
			custom_tooltip = diarch_attempt_to_overthrow_liege.tt.liege_response
			custom_tooltip = diarch_attempt_to_overthrow_liege.tt.liege_response.information_on_converting_councillors
			custom_tooltip = diarch_attempt_to_overthrow_liege.tt.consequences
			# Now, show what's gonna happen.
			random_list = {
				# If scope:liege accepts their fate, this can all end peacefully.
				100 = {
					desc = diarch_attempt_to_overthrow_liege.tt.liege_accepts
					show_chance = no
					# You take all top-tier titles.
					custom_tooltip = diarch_attempt_to_overthrow_liege.tt.liege_accepts.usurp_targets.primary
					# If there's a suitable kingdom title, you'll absorb that too.
					## By suitable, we mean "one that has some lands within the sub-realm".
					if = {
						limit = {
							liege = {
								diarch_coup_attempt_grabbable_kingdom_trigger = { TARGET = root.liege }
							}
						}
						custom_tooltip = diarch_attempt_to_overthrow_liege.tt.liege_accepts.usurp_targets.kingdom
					}
					# If they hold the de jure capital & its duchy, you'll take _those_, thank you.
					if = {
						limit = {
							liege = {
								any_held_title = {
									diarch_coup_attempt_grabbable_capital_and_duchies_trigger = { TARGET = root.liege }
								}
							}
						}
						custom_tooltip = diarch_attempt_to_overthrow_liege.tt.liege_accepts.usurp_targets.capital
					}
					# Remaining lands stay with scope:liege.
					custom_tooltip = diarch_attempt_to_overthrow_liege.tt.liege_accepts.keep_more_titles
					custom_tooltip = diarch_attempt_to_overthrow_liege.tt.liege_accepts.remains_ruling
				}
				# If scope:liege puts up a fight and loses, you bust them down.
				100 = {
					desc = diarch_attempt_to_overthrow_liege.tt.liege_fights_and_loses
					show_chance = no
					# Most lands stay with scope:liege.
					custom_tooltip = diarch_attempt_to_overthrow_liege.tt.liege_fights_and_loses.take_more_titles
					custom_tooltip = diarch_attempt_to_overthrow_liege.tt.liege_fights_and_loses.may_lose_everything
				}
				# And if things go wrong?
				## Diplomacy Coup.
				100 = {
					desc = diarch_attempt_to_overthrow_liege.tt.diplomacy_coup
					show_chance = no
					custom_tooltip = diarch_attempt_to_overthrow_liege.tt.win.liege_lives
					custom_tooltip = diarch_attempt_to_overthrow_liege.tt.win.considered_merciful
					custom_tooltip = diarch_attempt_to_overthrow_liege.tt.lose.usurper_captured
				}
				## Intrigue Coup.
				100 = {
					desc = diarch_attempt_to_overthrow_liege.tt.intrigue_coup
					show_chance = no
					custom_tooltip = diarch_attempt_to_overthrow_liege.tt.win.liege_captured
					custom_tooltip = diarch_attempt_to_overthrow_liege.tt.lose.usurper_captured
				}
				## Prowess Coup.
				100 = {
					desc = diarch_attempt_to_overthrow_liege.tt.prowess_coup
					show_chance = no
					custom_tooltip = diarch_attempt_to_overthrow_liege.tt.win.liege_dies
					custom_tooltip = diarch_attempt_to_overthrow_liege.tt.loss.usurper_dies
				}
			} 
			# Compile our final conspirator list.
			diarch_finalise_conspirators_for_overthrow_list_effect = yes
			# Send out the actual events.
			liege = {
				# Diplomacy.
				if = {
					limit = { scope:coup_diplomacy = yes }
					trigger_event = diarchy.9001
				}
				# Intrigue.
				if = {
					limit = { scope:coup_intrigue = yes }
					trigger_event = diarchy.9011
				}
				# Prowess.
				if = {
					limit = { scope:coup_prowess = yes }
					trigger_event = diarchy.9021
				}
			}
			
			# If successful, this event will brand you as an upstart usurper
			trigger_event = {
				id = lopc_coup_event.0001
				days = 7
			}
		}
	}
	
	ai_potential = {
		always = no
	}
}