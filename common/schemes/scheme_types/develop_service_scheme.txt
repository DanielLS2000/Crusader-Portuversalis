lopc_develop_service = {
	# Basic Setup
	skill = stewardship
	desc = lopc_develop_service_desc
	success_desc = lopc_develop_service_success_desc
	icon = icon_scheme_slander
	illustration = "gfx/interface/illustrations/event_scenes/corridor.dds"
	category = contract
	target_type = title
	is_secret = no
	maximum_breaches = 5

	# Parameters
	speed_per_skill_point = t2_spsp_owner_value
	speed_per_target_skill_point = 0
	spymaster_speed_per_skill_point = t2_spsp_owner_spy_value
	target_spymaster_speed_per_skill_point = 0
	tier_speed = 0
	base_progress_goal = t3_base_phase_length_value
	maximum_secrecy = 100
	base_maximum_success = t2_base_max_success_value
	phases_per_agent_charge = 1
	success_chance_growth_per_skill_point = t3_scgpsp_value

	# Core Triggers
	allow = {
		is_adult = yes
		is_imprisoned = no
		is_lopc_with_employer = yes
	}

	valid = { # only triggered by event so should
		#scope:target = {
		#	is_alive = yes
		#	has_relation_lopc_courtier = scope:owner
		#}
	}

	# Agents
	agent_leave_threshold = -25
	agent_join_chance = {
		base = 0
		ai_agent_join_chance_basic_suite_modifier = yes
		ai_agent_join_chance_personal_general_suite_modifier = yes
		#ai_agent_join_chance_personal_inoffensive_modifier = yes
		#ai_agent_join_chance_hostile_general_suite_modifier = yes
		modifier = {
			liege = scope:owner
			add = 40
			desc = lopc_you_boss_modifier
		}
		opinion_modifier = {
			trigger = {
				NOT = { this = scope:target }
			}
			who = this
			opinion_target = scope:target
			desc = SCHEME_MY_OPINION_OF_TARGET
			max = 30
			min = -30
		}
	}
	valid_agent = { is_valid_agent_standard_trigger = yes }
	agent_groups_owner_perspective = { courtiers guests scripted_relations peer_vassals vassals family }
	agent_groups_target_character_perspective = { courtiers peer_vassals vassals scripted_relations family }

	odds_prediction = {
		add = base_odds_prediction_target_is_char_value
		add = odds_skill_contribution_stewardship_value
		add = agent_groups_owner_perspective_value
		add = agent_groups_target_character_perspective_value
		add = odds_slander_scheme_misc_value
		min = 0
	}

	# Base Chances
	base_success_chance = {
		base = 0

		# Skill
		scheme_type_skill_success_chance_modifier = { SKILL = STEWARDSHIP }

		# Diarchs are better at schemes within their liege's realm
		diarch_scheming_within_realm_bonus_modifier = yes

		# Modifiers
		modifier = {
			scope:owner = { has_character_modifier = poet_for_diplo_schemes_modifier }
			desc = poet_for_diplo_schemes_modifier
			add = 15
		}
		modifier = {
			scope:owner = {
				has_character_modifier = united_political_agents_modifier
				is_vassal_of = scope:target
			}
			desc = united_political_agents_modifier
			add = 15
		}
		#modifier = {			
		#	limit = {
		#		always = no
		#	}
		#	desc = service_not_at_court_modifiers
		#	add = -1000
		#}
	}

	# On Actions
	on_start = {
		set_variable = {
			name = apply_countermeasures
			value = flag:indirect
		}
		# Fallback agents â€” a balanced config if you start the scheme from script.
		if = {
			limit = {
				scheme_owner = {
					NOT = { has_variable = agents_added }
				}
			}
			add_agent_slot = agent_intermediary
			add_agent_slot = agent_sycophant
			add_agent_slot = agent_political_socialite
			add_agent_slot = agent_bureaucrat
			add_agent_slot = agent_bureaucrat
		}
	}
	on_phase_completed = {
		suppress_scheme_follow_up_event_till_input_given_effect = yes
		lopc_develop_service_scheme_prep_effect = yes
		#cap_schemes_and_fire_reminders_effect = yes
	}
	on_hud_click  = { lopc_develop_service_scheme_prep_effect = yes }
	on_semiyearly = {
		if = {
			limit = {
				scheme_owner = { is_ai = yes }
			}
			lopc_develop_service_scheme_prep_effect = yes
		}
	}

	## Invalidation
	on_invalidated = {
		scheme_target_title = {
			save_scope_as = target
		}
		scheme_owner = {
			save_scope_as = owner
			send_interface_toast = {
				type = event_toast_effect_neutral
				title = court_service_invalidated_title
				left_icon = scope:target
				if = { # Invalidation due to death
					limit = {
						scope:target = { is_alive = no }
						NOT = { block_death_event_trigger = { DEAD = scope:target } }
					}
					custom_tooltip = scheme_target_died
				}
				else_if = { # Diplo range: is it relevant here?
					limit = {
						scope:target = { 
							NOT = { in_diplomatic_range = scope:owner } 
						}
					}
					custom_tooltip = scheme_target_not_in_diplomatic_range
				}
				else_if = { # Not at court
					limit = {
						scope:target = {
							NOT = { is_lopc_with_employer = no }
						}
					}
					custom_tooltip = court_service_invalidated_left
				}
			}
		}
	}

	## Ongoing
	on_monthly = {
		hostile_scheme_monthly_discovery_chance_effect = yes
		if = {
			limit = {
				NOT = { exists = scope:discovery_event_happening }
			}
			fire_generic_contract_scheme_on_going_events_effect = yes
		}
	}
}